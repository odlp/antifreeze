// Code generated by counterfeiter. DO NOT EDIT.
package v6fakes

import (
	sync "sync"

	v2action "code.cloudfoundry.org/cli/actor/v2action"
	v6 "code.cloudfoundry.org/cli/command/v6"
	types "code.cloudfoundry.org/cli/types"
)

type FakeUpdateBuildpackActor struct {
	CloudControllerAPIVersionStub        func() string
	cloudControllerAPIVersionMutex       sync.RWMutex
	cloudControllerAPIVersionArgsForCall []struct {
	}
	cloudControllerAPIVersionReturns struct {
		result1 string
	}
	cloudControllerAPIVersionReturnsOnCall map[int]struct {
		result1 string
	}
	PrepareBuildpackBitsStub        func(string, string, v2action.Downloader) (string, error)
	prepareBuildpackBitsMutex       sync.RWMutex
	prepareBuildpackBitsArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 v2action.Downloader
	}
	prepareBuildpackBitsReturns struct {
		result1 string
		result2 error
	}
	prepareBuildpackBitsReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	UpdateBuildpackByNameAndStackStub        func(string, string, types.NullInt, types.NullBool, types.NullBool) (string, v2action.Warnings, error)
	updateBuildpackByNameAndStackMutex       sync.RWMutex
	updateBuildpackByNameAndStackArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 types.NullInt
		arg4 types.NullBool
		arg5 types.NullBool
	}
	updateBuildpackByNameAndStackReturns struct {
		result1 string
		result2 v2action.Warnings
		result3 error
	}
	updateBuildpackByNameAndStackReturnsOnCall map[int]struct {
		result1 string
		result2 v2action.Warnings
		result3 error
	}
	UploadBuildpackStub        func(string, string, v2action.SimpleProgressBar) (v2action.Warnings, error)
	uploadBuildpackMutex       sync.RWMutex
	uploadBuildpackArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 v2action.SimpleProgressBar
	}
	uploadBuildpackReturns struct {
		result1 v2action.Warnings
		result2 error
	}
	uploadBuildpackReturnsOnCall map[int]struct {
		result1 v2action.Warnings
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUpdateBuildpackActor) CloudControllerAPIVersion() string {
	fake.cloudControllerAPIVersionMutex.Lock()
	ret, specificReturn := fake.cloudControllerAPIVersionReturnsOnCall[len(fake.cloudControllerAPIVersionArgsForCall)]
	fake.cloudControllerAPIVersionArgsForCall = append(fake.cloudControllerAPIVersionArgsForCall, struct {
	}{})
	fake.recordInvocation("CloudControllerAPIVersion", []interface{}{})
	fake.cloudControllerAPIVersionMutex.Unlock()
	if fake.CloudControllerAPIVersionStub != nil {
		return fake.CloudControllerAPIVersionStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.cloudControllerAPIVersionReturns
	return fakeReturns.result1
}

func (fake *FakeUpdateBuildpackActor) CloudControllerAPIVersionCallCount() int {
	fake.cloudControllerAPIVersionMutex.RLock()
	defer fake.cloudControllerAPIVersionMutex.RUnlock()
	return len(fake.cloudControllerAPIVersionArgsForCall)
}

func (fake *FakeUpdateBuildpackActor) CloudControllerAPIVersionCalls(stub func() string) {
	fake.cloudControllerAPIVersionMutex.Lock()
	defer fake.cloudControllerAPIVersionMutex.Unlock()
	fake.CloudControllerAPIVersionStub = stub
}

func (fake *FakeUpdateBuildpackActor) CloudControllerAPIVersionReturns(result1 string) {
	fake.cloudControllerAPIVersionMutex.Lock()
	defer fake.cloudControllerAPIVersionMutex.Unlock()
	fake.CloudControllerAPIVersionStub = nil
	fake.cloudControllerAPIVersionReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeUpdateBuildpackActor) CloudControllerAPIVersionReturnsOnCall(i int, result1 string) {
	fake.cloudControllerAPIVersionMutex.Lock()
	defer fake.cloudControllerAPIVersionMutex.Unlock()
	fake.CloudControllerAPIVersionStub = nil
	if fake.cloudControllerAPIVersionReturnsOnCall == nil {
		fake.cloudControllerAPIVersionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.cloudControllerAPIVersionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeUpdateBuildpackActor) PrepareBuildpackBits(arg1 string, arg2 string, arg3 v2action.Downloader) (string, error) {
	fake.prepareBuildpackBitsMutex.Lock()
	ret, specificReturn := fake.prepareBuildpackBitsReturnsOnCall[len(fake.prepareBuildpackBitsArgsForCall)]
	fake.prepareBuildpackBitsArgsForCall = append(fake.prepareBuildpackBitsArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 v2action.Downloader
	}{arg1, arg2, arg3})
	fake.recordInvocation("PrepareBuildpackBits", []interface{}{arg1, arg2, arg3})
	fake.prepareBuildpackBitsMutex.Unlock()
	if fake.PrepareBuildpackBitsStub != nil {
		return fake.PrepareBuildpackBitsStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.prepareBuildpackBitsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUpdateBuildpackActor) PrepareBuildpackBitsCallCount() int {
	fake.prepareBuildpackBitsMutex.RLock()
	defer fake.prepareBuildpackBitsMutex.RUnlock()
	return len(fake.prepareBuildpackBitsArgsForCall)
}

func (fake *FakeUpdateBuildpackActor) PrepareBuildpackBitsCalls(stub func(string, string, v2action.Downloader) (string, error)) {
	fake.prepareBuildpackBitsMutex.Lock()
	defer fake.prepareBuildpackBitsMutex.Unlock()
	fake.PrepareBuildpackBitsStub = stub
}

func (fake *FakeUpdateBuildpackActor) PrepareBuildpackBitsArgsForCall(i int) (string, string, v2action.Downloader) {
	fake.prepareBuildpackBitsMutex.RLock()
	defer fake.prepareBuildpackBitsMutex.RUnlock()
	argsForCall := fake.prepareBuildpackBitsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUpdateBuildpackActor) PrepareBuildpackBitsReturns(result1 string, result2 error) {
	fake.prepareBuildpackBitsMutex.Lock()
	defer fake.prepareBuildpackBitsMutex.Unlock()
	fake.PrepareBuildpackBitsStub = nil
	fake.prepareBuildpackBitsReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeUpdateBuildpackActor) PrepareBuildpackBitsReturnsOnCall(i int, result1 string, result2 error) {
	fake.prepareBuildpackBitsMutex.Lock()
	defer fake.prepareBuildpackBitsMutex.Unlock()
	fake.PrepareBuildpackBitsStub = nil
	if fake.prepareBuildpackBitsReturnsOnCall == nil {
		fake.prepareBuildpackBitsReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.prepareBuildpackBitsReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeUpdateBuildpackActor) UpdateBuildpackByNameAndStack(arg1 string, arg2 string, arg3 types.NullInt, arg4 types.NullBool, arg5 types.NullBool) (string, v2action.Warnings, error) {
	fake.updateBuildpackByNameAndStackMutex.Lock()
	ret, specificReturn := fake.updateBuildpackByNameAndStackReturnsOnCall[len(fake.updateBuildpackByNameAndStackArgsForCall)]
	fake.updateBuildpackByNameAndStackArgsForCall = append(fake.updateBuildpackByNameAndStackArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 types.NullInt
		arg4 types.NullBool
		arg5 types.NullBool
	}{arg1, arg2, arg3, arg4, arg5})
	fake.recordInvocation("UpdateBuildpackByNameAndStack", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.updateBuildpackByNameAndStackMutex.Unlock()
	if fake.UpdateBuildpackByNameAndStackStub != nil {
		return fake.UpdateBuildpackByNameAndStackStub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.updateBuildpackByNameAndStackReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeUpdateBuildpackActor) UpdateBuildpackByNameAndStackCallCount() int {
	fake.updateBuildpackByNameAndStackMutex.RLock()
	defer fake.updateBuildpackByNameAndStackMutex.RUnlock()
	return len(fake.updateBuildpackByNameAndStackArgsForCall)
}

func (fake *FakeUpdateBuildpackActor) UpdateBuildpackByNameAndStackCalls(stub func(string, string, types.NullInt, types.NullBool, types.NullBool) (string, v2action.Warnings, error)) {
	fake.updateBuildpackByNameAndStackMutex.Lock()
	defer fake.updateBuildpackByNameAndStackMutex.Unlock()
	fake.UpdateBuildpackByNameAndStackStub = stub
}

func (fake *FakeUpdateBuildpackActor) UpdateBuildpackByNameAndStackArgsForCall(i int) (string, string, types.NullInt, types.NullBool, types.NullBool) {
	fake.updateBuildpackByNameAndStackMutex.RLock()
	defer fake.updateBuildpackByNameAndStackMutex.RUnlock()
	argsForCall := fake.updateBuildpackByNameAndStackArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeUpdateBuildpackActor) UpdateBuildpackByNameAndStackReturns(result1 string, result2 v2action.Warnings, result3 error) {
	fake.updateBuildpackByNameAndStackMutex.Lock()
	defer fake.updateBuildpackByNameAndStackMutex.Unlock()
	fake.UpdateBuildpackByNameAndStackStub = nil
	fake.updateBuildpackByNameAndStackReturns = struct {
		result1 string
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUpdateBuildpackActor) UpdateBuildpackByNameAndStackReturnsOnCall(i int, result1 string, result2 v2action.Warnings, result3 error) {
	fake.updateBuildpackByNameAndStackMutex.Lock()
	defer fake.updateBuildpackByNameAndStackMutex.Unlock()
	fake.UpdateBuildpackByNameAndStackStub = nil
	if fake.updateBuildpackByNameAndStackReturnsOnCall == nil {
		fake.updateBuildpackByNameAndStackReturnsOnCall = make(map[int]struct {
			result1 string
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.updateBuildpackByNameAndStackReturnsOnCall[i] = struct {
		result1 string
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUpdateBuildpackActor) UploadBuildpack(arg1 string, arg2 string, arg3 v2action.SimpleProgressBar) (v2action.Warnings, error) {
	fake.uploadBuildpackMutex.Lock()
	ret, specificReturn := fake.uploadBuildpackReturnsOnCall[len(fake.uploadBuildpackArgsForCall)]
	fake.uploadBuildpackArgsForCall = append(fake.uploadBuildpackArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 v2action.SimpleProgressBar
	}{arg1, arg2, arg3})
	fake.recordInvocation("UploadBuildpack", []interface{}{arg1, arg2, arg3})
	fake.uploadBuildpackMutex.Unlock()
	if fake.UploadBuildpackStub != nil {
		return fake.UploadBuildpackStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.uploadBuildpackReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUpdateBuildpackActor) UploadBuildpackCallCount() int {
	fake.uploadBuildpackMutex.RLock()
	defer fake.uploadBuildpackMutex.RUnlock()
	return len(fake.uploadBuildpackArgsForCall)
}

func (fake *FakeUpdateBuildpackActor) UploadBuildpackCalls(stub func(string, string, v2action.SimpleProgressBar) (v2action.Warnings, error)) {
	fake.uploadBuildpackMutex.Lock()
	defer fake.uploadBuildpackMutex.Unlock()
	fake.UploadBuildpackStub = stub
}

func (fake *FakeUpdateBuildpackActor) UploadBuildpackArgsForCall(i int) (string, string, v2action.SimpleProgressBar) {
	fake.uploadBuildpackMutex.RLock()
	defer fake.uploadBuildpackMutex.RUnlock()
	argsForCall := fake.uploadBuildpackArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUpdateBuildpackActor) UploadBuildpackReturns(result1 v2action.Warnings, result2 error) {
	fake.uploadBuildpackMutex.Lock()
	defer fake.uploadBuildpackMutex.Unlock()
	fake.UploadBuildpackStub = nil
	fake.uploadBuildpackReturns = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeUpdateBuildpackActor) UploadBuildpackReturnsOnCall(i int, result1 v2action.Warnings, result2 error) {
	fake.uploadBuildpackMutex.Lock()
	defer fake.uploadBuildpackMutex.Unlock()
	fake.UploadBuildpackStub = nil
	if fake.uploadBuildpackReturnsOnCall == nil {
		fake.uploadBuildpackReturnsOnCall = make(map[int]struct {
			result1 v2action.Warnings
			result2 error
		})
	}
	fake.uploadBuildpackReturnsOnCall[i] = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeUpdateBuildpackActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cloudControllerAPIVersionMutex.RLock()
	defer fake.cloudControllerAPIVersionMutex.RUnlock()
	fake.prepareBuildpackBitsMutex.RLock()
	defer fake.prepareBuildpackBitsMutex.RUnlock()
	fake.updateBuildpackByNameAndStackMutex.RLock()
	defer fake.updateBuildpackByNameAndStackMutex.RUnlock()
	fake.uploadBuildpackMutex.RLock()
	defer fake.uploadBuildpackMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUpdateBuildpackActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v6.UpdateBuildpackActor = new(FakeUpdateBuildpackActor)
