// Code generated by counterfeiter. DO NOT EDIT.
package v6fakes

import (
	sync "sync"

	v2action "code.cloudfoundry.org/cli/actor/v2action"
	v6 "code.cloudfoundry.org/cli/command/v6"
)

type FakeSpaceActor struct {
	CloudControllerAPIVersionStub        func() string
	cloudControllerAPIVersionMutex       sync.RWMutex
	cloudControllerAPIVersionArgsForCall []struct {
	}
	cloudControllerAPIVersionReturns struct {
		result1 string
	}
	cloudControllerAPIVersionReturnsOnCall map[int]struct {
		result1 string
	}
	GetSpaceByOrganizationAndNameStub        func(string, string) (v2action.Space, v2action.Warnings, error)
	getSpaceByOrganizationAndNameMutex       sync.RWMutex
	getSpaceByOrganizationAndNameArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getSpaceByOrganizationAndNameReturns struct {
		result1 v2action.Space
		result2 v2action.Warnings
		result3 error
	}
	getSpaceByOrganizationAndNameReturnsOnCall map[int]struct {
		result1 v2action.Space
		result2 v2action.Warnings
		result3 error
	}
	GetSpaceSummaryByOrganizationAndNameStub        func(string, string) (v2action.SpaceSummary, v2action.Warnings, error)
	getSpaceSummaryByOrganizationAndNameMutex       sync.RWMutex
	getSpaceSummaryByOrganizationAndNameArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getSpaceSummaryByOrganizationAndNameReturns struct {
		result1 v2action.SpaceSummary
		result2 v2action.Warnings
		result3 error
	}
	getSpaceSummaryByOrganizationAndNameReturnsOnCall map[int]struct {
		result1 v2action.SpaceSummary
		result2 v2action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSpaceActor) CloudControllerAPIVersion() string {
	fake.cloudControllerAPIVersionMutex.Lock()
	ret, specificReturn := fake.cloudControllerAPIVersionReturnsOnCall[len(fake.cloudControllerAPIVersionArgsForCall)]
	fake.cloudControllerAPIVersionArgsForCall = append(fake.cloudControllerAPIVersionArgsForCall, struct {
	}{})
	fake.recordInvocation("CloudControllerAPIVersion", []interface{}{})
	fake.cloudControllerAPIVersionMutex.Unlock()
	if fake.CloudControllerAPIVersionStub != nil {
		return fake.CloudControllerAPIVersionStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.cloudControllerAPIVersionReturns
	return fakeReturns.result1
}

func (fake *FakeSpaceActor) CloudControllerAPIVersionCallCount() int {
	fake.cloudControllerAPIVersionMutex.RLock()
	defer fake.cloudControllerAPIVersionMutex.RUnlock()
	return len(fake.cloudControllerAPIVersionArgsForCall)
}

func (fake *FakeSpaceActor) CloudControllerAPIVersionCalls(stub func() string) {
	fake.cloudControllerAPIVersionMutex.Lock()
	defer fake.cloudControllerAPIVersionMutex.Unlock()
	fake.CloudControllerAPIVersionStub = stub
}

func (fake *FakeSpaceActor) CloudControllerAPIVersionReturns(result1 string) {
	fake.cloudControllerAPIVersionMutex.Lock()
	defer fake.cloudControllerAPIVersionMutex.Unlock()
	fake.CloudControllerAPIVersionStub = nil
	fake.cloudControllerAPIVersionReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeSpaceActor) CloudControllerAPIVersionReturnsOnCall(i int, result1 string) {
	fake.cloudControllerAPIVersionMutex.Lock()
	defer fake.cloudControllerAPIVersionMutex.Unlock()
	fake.CloudControllerAPIVersionStub = nil
	if fake.cloudControllerAPIVersionReturnsOnCall == nil {
		fake.cloudControllerAPIVersionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.cloudControllerAPIVersionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeSpaceActor) GetSpaceByOrganizationAndName(arg1 string, arg2 string) (v2action.Space, v2action.Warnings, error) {
	fake.getSpaceByOrganizationAndNameMutex.Lock()
	ret, specificReturn := fake.getSpaceByOrganizationAndNameReturnsOnCall[len(fake.getSpaceByOrganizationAndNameArgsForCall)]
	fake.getSpaceByOrganizationAndNameArgsForCall = append(fake.getSpaceByOrganizationAndNameArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetSpaceByOrganizationAndName", []interface{}{arg1, arg2})
	fake.getSpaceByOrganizationAndNameMutex.Unlock()
	if fake.GetSpaceByOrganizationAndNameStub != nil {
		return fake.GetSpaceByOrganizationAndNameStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getSpaceByOrganizationAndNameReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeSpaceActor) GetSpaceByOrganizationAndNameCallCount() int {
	fake.getSpaceByOrganizationAndNameMutex.RLock()
	defer fake.getSpaceByOrganizationAndNameMutex.RUnlock()
	return len(fake.getSpaceByOrganizationAndNameArgsForCall)
}

func (fake *FakeSpaceActor) GetSpaceByOrganizationAndNameCalls(stub func(string, string) (v2action.Space, v2action.Warnings, error)) {
	fake.getSpaceByOrganizationAndNameMutex.Lock()
	defer fake.getSpaceByOrganizationAndNameMutex.Unlock()
	fake.GetSpaceByOrganizationAndNameStub = stub
}

func (fake *FakeSpaceActor) GetSpaceByOrganizationAndNameArgsForCall(i int) (string, string) {
	fake.getSpaceByOrganizationAndNameMutex.RLock()
	defer fake.getSpaceByOrganizationAndNameMutex.RUnlock()
	argsForCall := fake.getSpaceByOrganizationAndNameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSpaceActor) GetSpaceByOrganizationAndNameReturns(result1 v2action.Space, result2 v2action.Warnings, result3 error) {
	fake.getSpaceByOrganizationAndNameMutex.Lock()
	defer fake.getSpaceByOrganizationAndNameMutex.Unlock()
	fake.GetSpaceByOrganizationAndNameStub = nil
	fake.getSpaceByOrganizationAndNameReturns = struct {
		result1 v2action.Space
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSpaceActor) GetSpaceByOrganizationAndNameReturnsOnCall(i int, result1 v2action.Space, result2 v2action.Warnings, result3 error) {
	fake.getSpaceByOrganizationAndNameMutex.Lock()
	defer fake.getSpaceByOrganizationAndNameMutex.Unlock()
	fake.GetSpaceByOrganizationAndNameStub = nil
	if fake.getSpaceByOrganizationAndNameReturnsOnCall == nil {
		fake.getSpaceByOrganizationAndNameReturnsOnCall = make(map[int]struct {
			result1 v2action.Space
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.getSpaceByOrganizationAndNameReturnsOnCall[i] = struct {
		result1 v2action.Space
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSpaceActor) GetSpaceSummaryByOrganizationAndName(arg1 string, arg2 string) (v2action.SpaceSummary, v2action.Warnings, error) {
	fake.getSpaceSummaryByOrganizationAndNameMutex.Lock()
	ret, specificReturn := fake.getSpaceSummaryByOrganizationAndNameReturnsOnCall[len(fake.getSpaceSummaryByOrganizationAndNameArgsForCall)]
	fake.getSpaceSummaryByOrganizationAndNameArgsForCall = append(fake.getSpaceSummaryByOrganizationAndNameArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetSpaceSummaryByOrganizationAndName", []interface{}{arg1, arg2})
	fake.getSpaceSummaryByOrganizationAndNameMutex.Unlock()
	if fake.GetSpaceSummaryByOrganizationAndNameStub != nil {
		return fake.GetSpaceSummaryByOrganizationAndNameStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getSpaceSummaryByOrganizationAndNameReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeSpaceActor) GetSpaceSummaryByOrganizationAndNameCallCount() int {
	fake.getSpaceSummaryByOrganizationAndNameMutex.RLock()
	defer fake.getSpaceSummaryByOrganizationAndNameMutex.RUnlock()
	return len(fake.getSpaceSummaryByOrganizationAndNameArgsForCall)
}

func (fake *FakeSpaceActor) GetSpaceSummaryByOrganizationAndNameCalls(stub func(string, string) (v2action.SpaceSummary, v2action.Warnings, error)) {
	fake.getSpaceSummaryByOrganizationAndNameMutex.Lock()
	defer fake.getSpaceSummaryByOrganizationAndNameMutex.Unlock()
	fake.GetSpaceSummaryByOrganizationAndNameStub = stub
}

func (fake *FakeSpaceActor) GetSpaceSummaryByOrganizationAndNameArgsForCall(i int) (string, string) {
	fake.getSpaceSummaryByOrganizationAndNameMutex.RLock()
	defer fake.getSpaceSummaryByOrganizationAndNameMutex.RUnlock()
	argsForCall := fake.getSpaceSummaryByOrganizationAndNameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSpaceActor) GetSpaceSummaryByOrganizationAndNameReturns(result1 v2action.SpaceSummary, result2 v2action.Warnings, result3 error) {
	fake.getSpaceSummaryByOrganizationAndNameMutex.Lock()
	defer fake.getSpaceSummaryByOrganizationAndNameMutex.Unlock()
	fake.GetSpaceSummaryByOrganizationAndNameStub = nil
	fake.getSpaceSummaryByOrganizationAndNameReturns = struct {
		result1 v2action.SpaceSummary
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSpaceActor) GetSpaceSummaryByOrganizationAndNameReturnsOnCall(i int, result1 v2action.SpaceSummary, result2 v2action.Warnings, result3 error) {
	fake.getSpaceSummaryByOrganizationAndNameMutex.Lock()
	defer fake.getSpaceSummaryByOrganizationAndNameMutex.Unlock()
	fake.GetSpaceSummaryByOrganizationAndNameStub = nil
	if fake.getSpaceSummaryByOrganizationAndNameReturnsOnCall == nil {
		fake.getSpaceSummaryByOrganizationAndNameReturnsOnCall = make(map[int]struct {
			result1 v2action.SpaceSummary
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.getSpaceSummaryByOrganizationAndNameReturnsOnCall[i] = struct {
		result1 v2action.SpaceSummary
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSpaceActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cloudControllerAPIVersionMutex.RLock()
	defer fake.cloudControllerAPIVersionMutex.RUnlock()
	fake.getSpaceByOrganizationAndNameMutex.RLock()
	defer fake.getSpaceByOrganizationAndNameMutex.RUnlock()
	fake.getSpaceSummaryByOrganizationAndNameMutex.RLock()
	defer fake.getSpaceSummaryByOrganizationAndNameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSpaceActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v6.SpaceActor = new(FakeSpaceActor)
