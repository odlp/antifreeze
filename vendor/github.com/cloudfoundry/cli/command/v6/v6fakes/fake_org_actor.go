// Code generated by counterfeiter. DO NOT EDIT.
package v6fakes

import (
	sync "sync"

	v2action "code.cloudfoundry.org/cli/actor/v2action"
	v6 "code.cloudfoundry.org/cli/command/v6"
)

type FakeOrgActor struct {
	GetOrganizationByNameStub        func(string) (v2action.Organization, v2action.Warnings, error)
	getOrganizationByNameMutex       sync.RWMutex
	getOrganizationByNameArgsForCall []struct {
		arg1 string
	}
	getOrganizationByNameReturns struct {
		result1 v2action.Organization
		result2 v2action.Warnings
		result3 error
	}
	getOrganizationByNameReturnsOnCall map[int]struct {
		result1 v2action.Organization
		result2 v2action.Warnings
		result3 error
	}
	GetOrganizationSummaryByNameStub        func(string) (v2action.OrganizationSummary, v2action.Warnings, error)
	getOrganizationSummaryByNameMutex       sync.RWMutex
	getOrganizationSummaryByNameArgsForCall []struct {
		arg1 string
	}
	getOrganizationSummaryByNameReturns struct {
		result1 v2action.OrganizationSummary
		result2 v2action.Warnings
		result3 error
	}
	getOrganizationSummaryByNameReturnsOnCall map[int]struct {
		result1 v2action.OrganizationSummary
		result2 v2action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOrgActor) GetOrganizationByName(arg1 string) (v2action.Organization, v2action.Warnings, error) {
	fake.getOrganizationByNameMutex.Lock()
	ret, specificReturn := fake.getOrganizationByNameReturnsOnCall[len(fake.getOrganizationByNameArgsForCall)]
	fake.getOrganizationByNameArgsForCall = append(fake.getOrganizationByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetOrganizationByName", []interface{}{arg1})
	fake.getOrganizationByNameMutex.Unlock()
	if fake.GetOrganizationByNameStub != nil {
		return fake.GetOrganizationByNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getOrganizationByNameReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeOrgActor) GetOrganizationByNameCallCount() int {
	fake.getOrganizationByNameMutex.RLock()
	defer fake.getOrganizationByNameMutex.RUnlock()
	return len(fake.getOrganizationByNameArgsForCall)
}

func (fake *FakeOrgActor) GetOrganizationByNameCalls(stub func(string) (v2action.Organization, v2action.Warnings, error)) {
	fake.getOrganizationByNameMutex.Lock()
	defer fake.getOrganizationByNameMutex.Unlock()
	fake.GetOrganizationByNameStub = stub
}

func (fake *FakeOrgActor) GetOrganizationByNameArgsForCall(i int) string {
	fake.getOrganizationByNameMutex.RLock()
	defer fake.getOrganizationByNameMutex.RUnlock()
	argsForCall := fake.getOrganizationByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOrgActor) GetOrganizationByNameReturns(result1 v2action.Organization, result2 v2action.Warnings, result3 error) {
	fake.getOrganizationByNameMutex.Lock()
	defer fake.getOrganizationByNameMutex.Unlock()
	fake.GetOrganizationByNameStub = nil
	fake.getOrganizationByNameReturns = struct {
		result1 v2action.Organization
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeOrgActor) GetOrganizationByNameReturnsOnCall(i int, result1 v2action.Organization, result2 v2action.Warnings, result3 error) {
	fake.getOrganizationByNameMutex.Lock()
	defer fake.getOrganizationByNameMutex.Unlock()
	fake.GetOrganizationByNameStub = nil
	if fake.getOrganizationByNameReturnsOnCall == nil {
		fake.getOrganizationByNameReturnsOnCall = make(map[int]struct {
			result1 v2action.Organization
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.getOrganizationByNameReturnsOnCall[i] = struct {
		result1 v2action.Organization
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeOrgActor) GetOrganizationSummaryByName(arg1 string) (v2action.OrganizationSummary, v2action.Warnings, error) {
	fake.getOrganizationSummaryByNameMutex.Lock()
	ret, specificReturn := fake.getOrganizationSummaryByNameReturnsOnCall[len(fake.getOrganizationSummaryByNameArgsForCall)]
	fake.getOrganizationSummaryByNameArgsForCall = append(fake.getOrganizationSummaryByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetOrganizationSummaryByName", []interface{}{arg1})
	fake.getOrganizationSummaryByNameMutex.Unlock()
	if fake.GetOrganizationSummaryByNameStub != nil {
		return fake.GetOrganizationSummaryByNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getOrganizationSummaryByNameReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeOrgActor) GetOrganizationSummaryByNameCallCount() int {
	fake.getOrganizationSummaryByNameMutex.RLock()
	defer fake.getOrganizationSummaryByNameMutex.RUnlock()
	return len(fake.getOrganizationSummaryByNameArgsForCall)
}

func (fake *FakeOrgActor) GetOrganizationSummaryByNameCalls(stub func(string) (v2action.OrganizationSummary, v2action.Warnings, error)) {
	fake.getOrganizationSummaryByNameMutex.Lock()
	defer fake.getOrganizationSummaryByNameMutex.Unlock()
	fake.GetOrganizationSummaryByNameStub = stub
}

func (fake *FakeOrgActor) GetOrganizationSummaryByNameArgsForCall(i int) string {
	fake.getOrganizationSummaryByNameMutex.RLock()
	defer fake.getOrganizationSummaryByNameMutex.RUnlock()
	argsForCall := fake.getOrganizationSummaryByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOrgActor) GetOrganizationSummaryByNameReturns(result1 v2action.OrganizationSummary, result2 v2action.Warnings, result3 error) {
	fake.getOrganizationSummaryByNameMutex.Lock()
	defer fake.getOrganizationSummaryByNameMutex.Unlock()
	fake.GetOrganizationSummaryByNameStub = nil
	fake.getOrganizationSummaryByNameReturns = struct {
		result1 v2action.OrganizationSummary
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeOrgActor) GetOrganizationSummaryByNameReturnsOnCall(i int, result1 v2action.OrganizationSummary, result2 v2action.Warnings, result3 error) {
	fake.getOrganizationSummaryByNameMutex.Lock()
	defer fake.getOrganizationSummaryByNameMutex.Unlock()
	fake.GetOrganizationSummaryByNameStub = nil
	if fake.getOrganizationSummaryByNameReturnsOnCall == nil {
		fake.getOrganizationSummaryByNameReturnsOnCall = make(map[int]struct {
			result1 v2action.OrganizationSummary
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.getOrganizationSummaryByNameReturnsOnCall[i] = struct {
		result1 v2action.OrganizationSummary
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeOrgActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getOrganizationByNameMutex.RLock()
	defer fake.getOrganizationByNameMutex.RUnlock()
	fake.getOrganizationSummaryByNameMutex.RLock()
	defer fake.getOrganizationSummaryByNameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOrgActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v6.OrgActor = new(FakeOrgActor)
