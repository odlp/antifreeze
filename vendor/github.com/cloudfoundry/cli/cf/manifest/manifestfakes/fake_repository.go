// This file was generated by counterfeiter
package manifestfakes

import (
	"sync"

	"code.cloudfoundry.org/cli/cf/manifest"
)

type FakeRepository struct {
	ReadManifestStub        func(string) (*manifest.Manifest, error)
	readManifestMutex       sync.RWMutex
	readManifestArgsForCall []struct {
		arg1 string
	}
	readManifestReturns struct {
		result1 *manifest.Manifest
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRepository) ReadManifest(arg1 string) (*manifest.Manifest, error) {
	fake.readManifestMutex.Lock()
	fake.readManifestArgsForCall = append(fake.readManifestArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ReadManifest", []interface{}{arg1})
	fake.readManifestMutex.Unlock()
	if fake.ReadManifestStub != nil {
		return fake.ReadManifestStub(arg1)
	} else {
		return fake.readManifestReturns.result1, fake.readManifestReturns.result2
	}
}

func (fake *FakeRepository) ReadManifestCallCount() int {
	fake.readManifestMutex.RLock()
	defer fake.readManifestMutex.RUnlock()
	return len(fake.readManifestArgsForCall)
}

func (fake *FakeRepository) ReadManifestArgsForCall(i int) string {
	fake.readManifestMutex.RLock()
	defer fake.readManifestMutex.RUnlock()
	return fake.readManifestArgsForCall[i].arg1
}

func (fake *FakeRepository) ReadManifestReturns(result1 *manifest.Manifest, result2 error) {
	fake.ReadManifestStub = nil
	fake.readManifestReturns = struct {
		result1 *manifest.Manifest
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.readManifestMutex.RLock()
	defer fake.readManifestMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ manifest.Repository = new(FakeRepository)
