// Code generated by counterfeiter. DO NOT EDIT.
package v2actionfakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v2action"
	"code.cloudfoundry.org/cli/api/router"
)

type FakeRouterClient struct {
	GetRouterGroupsByNameStub        func(string) ([]router.RouterGroup, error)
	getRouterGroupsByNameMutex       sync.RWMutex
	getRouterGroupsByNameArgsForCall []struct {
		arg1 string
	}
	getRouterGroupsByNameReturns struct {
		result1 []router.RouterGroup
		result2 error
	}
	getRouterGroupsByNameReturnsOnCall map[int]struct {
		result1 []router.RouterGroup
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRouterClient) GetRouterGroupsByName(arg1 string) ([]router.RouterGroup, error) {
	fake.getRouterGroupsByNameMutex.Lock()
	ret, specificReturn := fake.getRouterGroupsByNameReturnsOnCall[len(fake.getRouterGroupsByNameArgsForCall)]
	fake.getRouterGroupsByNameArgsForCall = append(fake.getRouterGroupsByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetRouterGroupsByName", []interface{}{arg1})
	fake.getRouterGroupsByNameMutex.Unlock()
	if fake.GetRouterGroupsByNameStub != nil {
		return fake.GetRouterGroupsByNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getRouterGroupsByNameReturns.result1, fake.getRouterGroupsByNameReturns.result2
}

func (fake *FakeRouterClient) GetRouterGroupsByNameCallCount() int {
	fake.getRouterGroupsByNameMutex.RLock()
	defer fake.getRouterGroupsByNameMutex.RUnlock()
	return len(fake.getRouterGroupsByNameArgsForCall)
}

func (fake *FakeRouterClient) GetRouterGroupsByNameArgsForCall(i int) string {
	fake.getRouterGroupsByNameMutex.RLock()
	defer fake.getRouterGroupsByNameMutex.RUnlock()
	return fake.getRouterGroupsByNameArgsForCall[i].arg1
}

func (fake *FakeRouterClient) GetRouterGroupsByNameReturns(result1 []router.RouterGroup, result2 error) {
	fake.GetRouterGroupsByNameStub = nil
	fake.getRouterGroupsByNameReturns = struct {
		result1 []router.RouterGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeRouterClient) GetRouterGroupsByNameReturnsOnCall(i int, result1 []router.RouterGroup, result2 error) {
	fake.GetRouterGroupsByNameStub = nil
	if fake.getRouterGroupsByNameReturnsOnCall == nil {
		fake.getRouterGroupsByNameReturnsOnCall = make(map[int]struct {
			result1 []router.RouterGroup
			result2 error
		})
	}
	fake.getRouterGroupsByNameReturnsOnCall[i] = struct {
		result1 []router.RouterGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeRouterClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getRouterGroupsByNameMutex.RLock()
	defer fake.getRouterGroupsByNameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRouterClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v2action.RouterClient = new(FakeRouterClient)
