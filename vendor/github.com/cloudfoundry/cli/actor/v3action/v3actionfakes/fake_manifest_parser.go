// Code generated by counterfeiter. DO NOT EDIT.
package v3actionfakes

import (
	sync "sync"

	v3action "code.cloudfoundry.org/cli/actor/v3action"
)

type FakeManifestParser struct {
	AppNamesStub        func() []string
	appNamesMutex       sync.RWMutex
	appNamesArgsForCall []struct {
	}
	appNamesReturns struct {
		result1 []string
	}
	appNamesReturnsOnCall map[int]struct {
		result1 []string
	}
	RawManifestStub        func(string) ([]byte, error)
	rawManifestMutex       sync.RWMutex
	rawManifestArgsForCall []struct {
		arg1 string
	}
	rawManifestReturns struct {
		result1 []byte
		result2 error
	}
	rawManifestReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManifestParser) AppNames() []string {
	fake.appNamesMutex.Lock()
	ret, specificReturn := fake.appNamesReturnsOnCall[len(fake.appNamesArgsForCall)]
	fake.appNamesArgsForCall = append(fake.appNamesArgsForCall, struct {
	}{})
	fake.recordInvocation("AppNames", []interface{}{})
	fake.appNamesMutex.Unlock()
	if fake.AppNamesStub != nil {
		return fake.AppNamesStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.appNamesReturns
	return fakeReturns.result1
}

func (fake *FakeManifestParser) AppNamesCallCount() int {
	fake.appNamesMutex.RLock()
	defer fake.appNamesMutex.RUnlock()
	return len(fake.appNamesArgsForCall)
}

func (fake *FakeManifestParser) AppNamesCalls(stub func() []string) {
	fake.appNamesMutex.Lock()
	defer fake.appNamesMutex.Unlock()
	fake.AppNamesStub = stub
}

func (fake *FakeManifestParser) AppNamesReturns(result1 []string) {
	fake.appNamesMutex.Lock()
	defer fake.appNamesMutex.Unlock()
	fake.AppNamesStub = nil
	fake.appNamesReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeManifestParser) AppNamesReturnsOnCall(i int, result1 []string) {
	fake.appNamesMutex.Lock()
	defer fake.appNamesMutex.Unlock()
	fake.AppNamesStub = nil
	if fake.appNamesReturnsOnCall == nil {
		fake.appNamesReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.appNamesReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeManifestParser) RawManifest(arg1 string) ([]byte, error) {
	fake.rawManifestMutex.Lock()
	ret, specificReturn := fake.rawManifestReturnsOnCall[len(fake.rawManifestArgsForCall)]
	fake.rawManifestArgsForCall = append(fake.rawManifestArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("RawManifest", []interface{}{arg1})
	fake.rawManifestMutex.Unlock()
	if fake.RawManifestStub != nil {
		return fake.RawManifestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.rawManifestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManifestParser) RawManifestCallCount() int {
	fake.rawManifestMutex.RLock()
	defer fake.rawManifestMutex.RUnlock()
	return len(fake.rawManifestArgsForCall)
}

func (fake *FakeManifestParser) RawManifestCalls(stub func(string) ([]byte, error)) {
	fake.rawManifestMutex.Lock()
	defer fake.rawManifestMutex.Unlock()
	fake.RawManifestStub = stub
}

func (fake *FakeManifestParser) RawManifestArgsForCall(i int) string {
	fake.rawManifestMutex.RLock()
	defer fake.rawManifestMutex.RUnlock()
	argsForCall := fake.rawManifestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManifestParser) RawManifestReturns(result1 []byte, result2 error) {
	fake.rawManifestMutex.Lock()
	defer fake.rawManifestMutex.Unlock()
	fake.RawManifestStub = nil
	fake.rawManifestReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeManifestParser) RawManifestReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.rawManifestMutex.Lock()
	defer fake.rawManifestMutex.Unlock()
	fake.RawManifestStub = nil
	if fake.rawManifestReturnsOnCall == nil {
		fake.rawManifestReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.rawManifestReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeManifestParser) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.appNamesMutex.RLock()
	defer fake.appNamesMutex.RUnlock()
	fake.rawManifestMutex.RLock()
	defer fake.rawManifestMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeManifestParser) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v3action.ManifestParser = new(FakeManifestParser)
