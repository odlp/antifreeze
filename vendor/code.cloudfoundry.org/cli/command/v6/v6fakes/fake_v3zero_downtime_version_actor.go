// Code generated by counterfeiter. DO NOT EDIT.
package v6fakes

import (
	sync "sync"

	v3action "code.cloudfoundry.org/cli/actor/v3action"
	v6 "code.cloudfoundry.org/cli/command/v6"
)

type FakeV3ZeroDowntimeVersionActor struct {
	CloudControllerAPIVersionStub        func() string
	cloudControllerAPIVersionMutex       sync.RWMutex
	cloudControllerAPIVersionArgsForCall []struct {
	}
	cloudControllerAPIVersionReturns struct {
		result1 string
	}
	cloudControllerAPIVersionReturnsOnCall map[int]struct {
		result1 string
	}
	CreateAndUploadBitsPackageByApplicationNameAndSpaceStub        func(string, string, string) (v3action.Package, v3action.Warnings, error)
	createAndUploadBitsPackageByApplicationNameAndSpaceMutex       sync.RWMutex
	createAndUploadBitsPackageByApplicationNameAndSpaceArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	createAndUploadBitsPackageByApplicationNameAndSpaceReturns struct {
		result1 v3action.Package
		result2 v3action.Warnings
		result3 error
	}
	createAndUploadBitsPackageByApplicationNameAndSpaceReturnsOnCall map[int]struct {
		result1 v3action.Package
		result2 v3action.Warnings
		result3 error
	}
	CreateApplicationInSpaceStub        func(v3action.Application, string) (v3action.Application, v3action.Warnings, error)
	createApplicationInSpaceMutex       sync.RWMutex
	createApplicationInSpaceArgsForCall []struct {
		arg1 v3action.Application
		arg2 string
	}
	createApplicationInSpaceReturns struct {
		result1 v3action.Application
		result2 v3action.Warnings
		result3 error
	}
	createApplicationInSpaceReturnsOnCall map[int]struct {
		result1 v3action.Application
		result2 v3action.Warnings
		result3 error
	}
	CreateDeploymentStub        func(string, string) (string, v3action.Warnings, error)
	createDeploymentMutex       sync.RWMutex
	createDeploymentArgsForCall []struct {
		arg1 string
		arg2 string
	}
	createDeploymentReturns struct {
		result1 string
		result2 v3action.Warnings
		result3 error
	}
	createDeploymentReturnsOnCall map[int]struct {
		result1 string
		result2 v3action.Warnings
		result3 error
	}
	CreateDockerPackageByApplicationNameAndSpaceStub        func(string, string, v3action.DockerImageCredentials) (v3action.Package, v3action.Warnings, error)
	createDockerPackageByApplicationNameAndSpaceMutex       sync.RWMutex
	createDockerPackageByApplicationNameAndSpaceArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 v3action.DockerImageCredentials
	}
	createDockerPackageByApplicationNameAndSpaceReturns struct {
		result1 v3action.Package
		result2 v3action.Warnings
		result3 error
	}
	createDockerPackageByApplicationNameAndSpaceReturnsOnCall map[int]struct {
		result1 v3action.Package
		result2 v3action.Warnings
		result3 error
	}
	GetApplicationByNameAndSpaceStub        func(string, string) (v3action.Application, v3action.Warnings, error)
	getApplicationByNameAndSpaceMutex       sync.RWMutex
	getApplicationByNameAndSpaceArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getApplicationByNameAndSpaceReturns struct {
		result1 v3action.Application
		result2 v3action.Warnings
		result3 error
	}
	getApplicationByNameAndSpaceReturnsOnCall map[int]struct {
		result1 v3action.Application
		result2 v3action.Warnings
		result3 error
	}
	GetCurrentDropletByApplicationStub        func(string) (v3action.Droplet, v3action.Warnings, error)
	getCurrentDropletByApplicationMutex       sync.RWMutex
	getCurrentDropletByApplicationArgsForCall []struct {
		arg1 string
	}
	getCurrentDropletByApplicationReturns struct {
		result1 v3action.Droplet
		result2 v3action.Warnings
		result3 error
	}
	getCurrentDropletByApplicationReturnsOnCall map[int]struct {
		result1 v3action.Droplet
		result2 v3action.Warnings
		result3 error
	}
	GetStreamingLogsForApplicationByNameAndSpaceStub        func(string, string, v3action.NOAAClient) (<-chan *v3action.LogMessage, <-chan error, v3action.Warnings, error)
	getStreamingLogsForApplicationByNameAndSpaceMutex       sync.RWMutex
	getStreamingLogsForApplicationByNameAndSpaceArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 v3action.NOAAClient
	}
	getStreamingLogsForApplicationByNameAndSpaceReturns struct {
		result1 <-chan *v3action.LogMessage
		result2 <-chan error
		result3 v3action.Warnings
		result4 error
	}
	getStreamingLogsForApplicationByNameAndSpaceReturnsOnCall map[int]struct {
		result1 <-chan *v3action.LogMessage
		result2 <-chan error
		result3 v3action.Warnings
		result4 error
	}
	PollDeploymentStub        func(string, chan<- v3action.Warnings) error
	pollDeploymentMutex       sync.RWMutex
	pollDeploymentArgsForCall []struct {
		arg1 string
		arg2 chan<- v3action.Warnings
	}
	pollDeploymentReturns struct {
		result1 error
	}
	pollDeploymentReturnsOnCall map[int]struct {
		result1 error
	}
	PollStartStub        func(string, chan<- v3action.Warnings) error
	pollStartMutex       sync.RWMutex
	pollStartArgsForCall []struct {
		arg1 string
		arg2 chan<- v3action.Warnings
	}
	pollStartReturns struct {
		result1 error
	}
	pollStartReturnsOnCall map[int]struct {
		result1 error
	}
	RestartApplicationStub        func(string) (v3action.Warnings, error)
	restartApplicationMutex       sync.RWMutex
	restartApplicationArgsForCall []struct {
		arg1 string
	}
	restartApplicationReturns struct {
		result1 v3action.Warnings
		result2 error
	}
	restartApplicationReturnsOnCall map[int]struct {
		result1 v3action.Warnings
		result2 error
	}
	SetApplicationDropletByApplicationNameAndSpaceStub        func(string, string, string) (v3action.Warnings, error)
	setApplicationDropletByApplicationNameAndSpaceMutex       sync.RWMutex
	setApplicationDropletByApplicationNameAndSpaceArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	setApplicationDropletByApplicationNameAndSpaceReturns struct {
		result1 v3action.Warnings
		result2 error
	}
	setApplicationDropletByApplicationNameAndSpaceReturnsOnCall map[int]struct {
		result1 v3action.Warnings
		result2 error
	}
	StagePackageStub        func(string, string) (<-chan v3action.Droplet, <-chan v3action.Warnings, <-chan error)
	stagePackageMutex       sync.RWMutex
	stagePackageArgsForCall []struct {
		arg1 string
		arg2 string
	}
	stagePackageReturns struct {
		result1 <-chan v3action.Droplet
		result2 <-chan v3action.Warnings
		result3 <-chan error
	}
	stagePackageReturnsOnCall map[int]struct {
		result1 <-chan v3action.Droplet
		result2 <-chan v3action.Warnings
		result3 <-chan error
	}
	UpdateApplicationStub        func(v3action.Application) (v3action.Application, v3action.Warnings, error)
	updateApplicationMutex       sync.RWMutex
	updateApplicationArgsForCall []struct {
		arg1 v3action.Application
	}
	updateApplicationReturns struct {
		result1 v3action.Application
		result2 v3action.Warnings
		result3 error
	}
	updateApplicationReturnsOnCall map[int]struct {
		result1 v3action.Application
		result2 v3action.Warnings
		result3 error
	}
	ZeroDowntimePollStartStub        func(string, chan<- v3action.Warnings) error
	zeroDowntimePollStartMutex       sync.RWMutex
	zeroDowntimePollStartArgsForCall []struct {
		arg1 string
		arg2 chan<- v3action.Warnings
	}
	zeroDowntimePollStartReturns struct {
		result1 error
	}
	zeroDowntimePollStartReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeV3ZeroDowntimeVersionActor) CloudControllerAPIVersion() string {
	fake.cloudControllerAPIVersionMutex.Lock()
	ret, specificReturn := fake.cloudControllerAPIVersionReturnsOnCall[len(fake.cloudControllerAPIVersionArgsForCall)]
	fake.cloudControllerAPIVersionArgsForCall = append(fake.cloudControllerAPIVersionArgsForCall, struct {
	}{})
	fake.recordInvocation("CloudControllerAPIVersion", []interface{}{})
	fake.cloudControllerAPIVersionMutex.Unlock()
	if fake.CloudControllerAPIVersionStub != nil {
		return fake.CloudControllerAPIVersionStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.cloudControllerAPIVersionReturns
	return fakeReturns.result1
}

func (fake *FakeV3ZeroDowntimeVersionActor) CloudControllerAPIVersionCallCount() int {
	fake.cloudControllerAPIVersionMutex.RLock()
	defer fake.cloudControllerAPIVersionMutex.RUnlock()
	return len(fake.cloudControllerAPIVersionArgsForCall)
}

func (fake *FakeV3ZeroDowntimeVersionActor) CloudControllerAPIVersionCalls(stub func() string) {
	fake.cloudControllerAPIVersionMutex.Lock()
	defer fake.cloudControllerAPIVersionMutex.Unlock()
	fake.CloudControllerAPIVersionStub = stub
}

func (fake *FakeV3ZeroDowntimeVersionActor) CloudControllerAPIVersionReturns(result1 string) {
	fake.cloudControllerAPIVersionMutex.Lock()
	defer fake.cloudControllerAPIVersionMutex.Unlock()
	fake.CloudControllerAPIVersionStub = nil
	fake.cloudControllerAPIVersionReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeV3ZeroDowntimeVersionActor) CloudControllerAPIVersionReturnsOnCall(i int, result1 string) {
	fake.cloudControllerAPIVersionMutex.Lock()
	defer fake.cloudControllerAPIVersionMutex.Unlock()
	fake.CloudControllerAPIVersionStub = nil
	if fake.cloudControllerAPIVersionReturnsOnCall == nil {
		fake.cloudControllerAPIVersionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.cloudControllerAPIVersionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeV3ZeroDowntimeVersionActor) CreateAndUploadBitsPackageByApplicationNameAndSpace(arg1 string, arg2 string, arg3 string) (v3action.Package, v3action.Warnings, error) {
	fake.createAndUploadBitsPackageByApplicationNameAndSpaceMutex.Lock()
	ret, specificReturn := fake.createAndUploadBitsPackageByApplicationNameAndSpaceReturnsOnCall[len(fake.createAndUploadBitsPackageByApplicationNameAndSpaceArgsForCall)]
	fake.createAndUploadBitsPackageByApplicationNameAndSpaceArgsForCall = append(fake.createAndUploadBitsPackageByApplicationNameAndSpaceArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateAndUploadBitsPackageByApplicationNameAndSpace", []interface{}{arg1, arg2, arg3})
	fake.createAndUploadBitsPackageByApplicationNameAndSpaceMutex.Unlock()
	if fake.CreateAndUploadBitsPackageByApplicationNameAndSpaceStub != nil {
		return fake.CreateAndUploadBitsPackageByApplicationNameAndSpaceStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.createAndUploadBitsPackageByApplicationNameAndSpaceReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeV3ZeroDowntimeVersionActor) CreateAndUploadBitsPackageByApplicationNameAndSpaceCallCount() int {
	fake.createAndUploadBitsPackageByApplicationNameAndSpaceMutex.RLock()
	defer fake.createAndUploadBitsPackageByApplicationNameAndSpaceMutex.RUnlock()
	return len(fake.createAndUploadBitsPackageByApplicationNameAndSpaceArgsForCall)
}

func (fake *FakeV3ZeroDowntimeVersionActor) CreateAndUploadBitsPackageByApplicationNameAndSpaceCalls(stub func(string, string, string) (v3action.Package, v3action.Warnings, error)) {
	fake.createAndUploadBitsPackageByApplicationNameAndSpaceMutex.Lock()
	defer fake.createAndUploadBitsPackageByApplicationNameAndSpaceMutex.Unlock()
	fake.CreateAndUploadBitsPackageByApplicationNameAndSpaceStub = stub
}

func (fake *FakeV3ZeroDowntimeVersionActor) CreateAndUploadBitsPackageByApplicationNameAndSpaceArgsForCall(i int) (string, string, string) {
	fake.createAndUploadBitsPackageByApplicationNameAndSpaceMutex.RLock()
	defer fake.createAndUploadBitsPackageByApplicationNameAndSpaceMutex.RUnlock()
	argsForCall := fake.createAndUploadBitsPackageByApplicationNameAndSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeV3ZeroDowntimeVersionActor) CreateAndUploadBitsPackageByApplicationNameAndSpaceReturns(result1 v3action.Package, result2 v3action.Warnings, result3 error) {
	fake.createAndUploadBitsPackageByApplicationNameAndSpaceMutex.Lock()
	defer fake.createAndUploadBitsPackageByApplicationNameAndSpaceMutex.Unlock()
	fake.CreateAndUploadBitsPackageByApplicationNameAndSpaceStub = nil
	fake.createAndUploadBitsPackageByApplicationNameAndSpaceReturns = struct {
		result1 v3action.Package
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV3ZeroDowntimeVersionActor) CreateAndUploadBitsPackageByApplicationNameAndSpaceReturnsOnCall(i int, result1 v3action.Package, result2 v3action.Warnings, result3 error) {
	fake.createAndUploadBitsPackageByApplicationNameAndSpaceMutex.Lock()
	defer fake.createAndUploadBitsPackageByApplicationNameAndSpaceMutex.Unlock()
	fake.CreateAndUploadBitsPackageByApplicationNameAndSpaceStub = nil
	if fake.createAndUploadBitsPackageByApplicationNameAndSpaceReturnsOnCall == nil {
		fake.createAndUploadBitsPackageByApplicationNameAndSpaceReturnsOnCall = make(map[int]struct {
			result1 v3action.Package
			result2 v3action.Warnings
			result3 error
		})
	}
	fake.createAndUploadBitsPackageByApplicationNameAndSpaceReturnsOnCall[i] = struct {
		result1 v3action.Package
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV3ZeroDowntimeVersionActor) CreateApplicationInSpace(arg1 v3action.Application, arg2 string) (v3action.Application, v3action.Warnings, error) {
	fake.createApplicationInSpaceMutex.Lock()
	ret, specificReturn := fake.createApplicationInSpaceReturnsOnCall[len(fake.createApplicationInSpaceArgsForCall)]
	fake.createApplicationInSpaceArgsForCall = append(fake.createApplicationInSpaceArgsForCall, struct {
		arg1 v3action.Application
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("CreateApplicationInSpace", []interface{}{arg1, arg2})
	fake.createApplicationInSpaceMutex.Unlock()
	if fake.CreateApplicationInSpaceStub != nil {
		return fake.CreateApplicationInSpaceStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.createApplicationInSpaceReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeV3ZeroDowntimeVersionActor) CreateApplicationInSpaceCallCount() int {
	fake.createApplicationInSpaceMutex.RLock()
	defer fake.createApplicationInSpaceMutex.RUnlock()
	return len(fake.createApplicationInSpaceArgsForCall)
}

func (fake *FakeV3ZeroDowntimeVersionActor) CreateApplicationInSpaceCalls(stub func(v3action.Application, string) (v3action.Application, v3action.Warnings, error)) {
	fake.createApplicationInSpaceMutex.Lock()
	defer fake.createApplicationInSpaceMutex.Unlock()
	fake.CreateApplicationInSpaceStub = stub
}

func (fake *FakeV3ZeroDowntimeVersionActor) CreateApplicationInSpaceArgsForCall(i int) (v3action.Application, string) {
	fake.createApplicationInSpaceMutex.RLock()
	defer fake.createApplicationInSpaceMutex.RUnlock()
	argsForCall := fake.createApplicationInSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeV3ZeroDowntimeVersionActor) CreateApplicationInSpaceReturns(result1 v3action.Application, result2 v3action.Warnings, result3 error) {
	fake.createApplicationInSpaceMutex.Lock()
	defer fake.createApplicationInSpaceMutex.Unlock()
	fake.CreateApplicationInSpaceStub = nil
	fake.createApplicationInSpaceReturns = struct {
		result1 v3action.Application
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV3ZeroDowntimeVersionActor) CreateApplicationInSpaceReturnsOnCall(i int, result1 v3action.Application, result2 v3action.Warnings, result3 error) {
	fake.createApplicationInSpaceMutex.Lock()
	defer fake.createApplicationInSpaceMutex.Unlock()
	fake.CreateApplicationInSpaceStub = nil
	if fake.createApplicationInSpaceReturnsOnCall == nil {
		fake.createApplicationInSpaceReturnsOnCall = make(map[int]struct {
			result1 v3action.Application
			result2 v3action.Warnings
			result3 error
		})
	}
	fake.createApplicationInSpaceReturnsOnCall[i] = struct {
		result1 v3action.Application
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV3ZeroDowntimeVersionActor) CreateDeployment(arg1 string, arg2 string) (string, v3action.Warnings, error) {
	fake.createDeploymentMutex.Lock()
	ret, specificReturn := fake.createDeploymentReturnsOnCall[len(fake.createDeploymentArgsForCall)]
	fake.createDeploymentArgsForCall = append(fake.createDeploymentArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("CreateDeployment", []interface{}{arg1, arg2})
	fake.createDeploymentMutex.Unlock()
	if fake.CreateDeploymentStub != nil {
		return fake.CreateDeploymentStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.createDeploymentReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeV3ZeroDowntimeVersionActor) CreateDeploymentCallCount() int {
	fake.createDeploymentMutex.RLock()
	defer fake.createDeploymentMutex.RUnlock()
	return len(fake.createDeploymentArgsForCall)
}

func (fake *FakeV3ZeroDowntimeVersionActor) CreateDeploymentCalls(stub func(string, string) (string, v3action.Warnings, error)) {
	fake.createDeploymentMutex.Lock()
	defer fake.createDeploymentMutex.Unlock()
	fake.CreateDeploymentStub = stub
}

func (fake *FakeV3ZeroDowntimeVersionActor) CreateDeploymentArgsForCall(i int) (string, string) {
	fake.createDeploymentMutex.RLock()
	defer fake.createDeploymentMutex.RUnlock()
	argsForCall := fake.createDeploymentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeV3ZeroDowntimeVersionActor) CreateDeploymentReturns(result1 string, result2 v3action.Warnings, result3 error) {
	fake.createDeploymentMutex.Lock()
	defer fake.createDeploymentMutex.Unlock()
	fake.CreateDeploymentStub = nil
	fake.createDeploymentReturns = struct {
		result1 string
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV3ZeroDowntimeVersionActor) CreateDeploymentReturnsOnCall(i int, result1 string, result2 v3action.Warnings, result3 error) {
	fake.createDeploymentMutex.Lock()
	defer fake.createDeploymentMutex.Unlock()
	fake.CreateDeploymentStub = nil
	if fake.createDeploymentReturnsOnCall == nil {
		fake.createDeploymentReturnsOnCall = make(map[int]struct {
			result1 string
			result2 v3action.Warnings
			result3 error
		})
	}
	fake.createDeploymentReturnsOnCall[i] = struct {
		result1 string
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV3ZeroDowntimeVersionActor) CreateDockerPackageByApplicationNameAndSpace(arg1 string, arg2 string, arg3 v3action.DockerImageCredentials) (v3action.Package, v3action.Warnings, error) {
	fake.createDockerPackageByApplicationNameAndSpaceMutex.Lock()
	ret, specificReturn := fake.createDockerPackageByApplicationNameAndSpaceReturnsOnCall[len(fake.createDockerPackageByApplicationNameAndSpaceArgsForCall)]
	fake.createDockerPackageByApplicationNameAndSpaceArgsForCall = append(fake.createDockerPackageByApplicationNameAndSpaceArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 v3action.DockerImageCredentials
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateDockerPackageByApplicationNameAndSpace", []interface{}{arg1, arg2, arg3})
	fake.createDockerPackageByApplicationNameAndSpaceMutex.Unlock()
	if fake.CreateDockerPackageByApplicationNameAndSpaceStub != nil {
		return fake.CreateDockerPackageByApplicationNameAndSpaceStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.createDockerPackageByApplicationNameAndSpaceReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeV3ZeroDowntimeVersionActor) CreateDockerPackageByApplicationNameAndSpaceCallCount() int {
	fake.createDockerPackageByApplicationNameAndSpaceMutex.RLock()
	defer fake.createDockerPackageByApplicationNameAndSpaceMutex.RUnlock()
	return len(fake.createDockerPackageByApplicationNameAndSpaceArgsForCall)
}

func (fake *FakeV3ZeroDowntimeVersionActor) CreateDockerPackageByApplicationNameAndSpaceCalls(stub func(string, string, v3action.DockerImageCredentials) (v3action.Package, v3action.Warnings, error)) {
	fake.createDockerPackageByApplicationNameAndSpaceMutex.Lock()
	defer fake.createDockerPackageByApplicationNameAndSpaceMutex.Unlock()
	fake.CreateDockerPackageByApplicationNameAndSpaceStub = stub
}

func (fake *FakeV3ZeroDowntimeVersionActor) CreateDockerPackageByApplicationNameAndSpaceArgsForCall(i int) (string, string, v3action.DockerImageCredentials) {
	fake.createDockerPackageByApplicationNameAndSpaceMutex.RLock()
	defer fake.createDockerPackageByApplicationNameAndSpaceMutex.RUnlock()
	argsForCall := fake.createDockerPackageByApplicationNameAndSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeV3ZeroDowntimeVersionActor) CreateDockerPackageByApplicationNameAndSpaceReturns(result1 v3action.Package, result2 v3action.Warnings, result3 error) {
	fake.createDockerPackageByApplicationNameAndSpaceMutex.Lock()
	defer fake.createDockerPackageByApplicationNameAndSpaceMutex.Unlock()
	fake.CreateDockerPackageByApplicationNameAndSpaceStub = nil
	fake.createDockerPackageByApplicationNameAndSpaceReturns = struct {
		result1 v3action.Package
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV3ZeroDowntimeVersionActor) CreateDockerPackageByApplicationNameAndSpaceReturnsOnCall(i int, result1 v3action.Package, result2 v3action.Warnings, result3 error) {
	fake.createDockerPackageByApplicationNameAndSpaceMutex.Lock()
	defer fake.createDockerPackageByApplicationNameAndSpaceMutex.Unlock()
	fake.CreateDockerPackageByApplicationNameAndSpaceStub = nil
	if fake.createDockerPackageByApplicationNameAndSpaceReturnsOnCall == nil {
		fake.createDockerPackageByApplicationNameAndSpaceReturnsOnCall = make(map[int]struct {
			result1 v3action.Package
			result2 v3action.Warnings
			result3 error
		})
	}
	fake.createDockerPackageByApplicationNameAndSpaceReturnsOnCall[i] = struct {
		result1 v3action.Package
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV3ZeroDowntimeVersionActor) GetApplicationByNameAndSpace(arg1 string, arg2 string) (v3action.Application, v3action.Warnings, error) {
	fake.getApplicationByNameAndSpaceMutex.Lock()
	ret, specificReturn := fake.getApplicationByNameAndSpaceReturnsOnCall[len(fake.getApplicationByNameAndSpaceArgsForCall)]
	fake.getApplicationByNameAndSpaceArgsForCall = append(fake.getApplicationByNameAndSpaceArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetApplicationByNameAndSpace", []interface{}{arg1, arg2})
	fake.getApplicationByNameAndSpaceMutex.Unlock()
	if fake.GetApplicationByNameAndSpaceStub != nil {
		return fake.GetApplicationByNameAndSpaceStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getApplicationByNameAndSpaceReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeV3ZeroDowntimeVersionActor) GetApplicationByNameAndSpaceCallCount() int {
	fake.getApplicationByNameAndSpaceMutex.RLock()
	defer fake.getApplicationByNameAndSpaceMutex.RUnlock()
	return len(fake.getApplicationByNameAndSpaceArgsForCall)
}

func (fake *FakeV3ZeroDowntimeVersionActor) GetApplicationByNameAndSpaceCalls(stub func(string, string) (v3action.Application, v3action.Warnings, error)) {
	fake.getApplicationByNameAndSpaceMutex.Lock()
	defer fake.getApplicationByNameAndSpaceMutex.Unlock()
	fake.GetApplicationByNameAndSpaceStub = stub
}

func (fake *FakeV3ZeroDowntimeVersionActor) GetApplicationByNameAndSpaceArgsForCall(i int) (string, string) {
	fake.getApplicationByNameAndSpaceMutex.RLock()
	defer fake.getApplicationByNameAndSpaceMutex.RUnlock()
	argsForCall := fake.getApplicationByNameAndSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeV3ZeroDowntimeVersionActor) GetApplicationByNameAndSpaceReturns(result1 v3action.Application, result2 v3action.Warnings, result3 error) {
	fake.getApplicationByNameAndSpaceMutex.Lock()
	defer fake.getApplicationByNameAndSpaceMutex.Unlock()
	fake.GetApplicationByNameAndSpaceStub = nil
	fake.getApplicationByNameAndSpaceReturns = struct {
		result1 v3action.Application
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV3ZeroDowntimeVersionActor) GetApplicationByNameAndSpaceReturnsOnCall(i int, result1 v3action.Application, result2 v3action.Warnings, result3 error) {
	fake.getApplicationByNameAndSpaceMutex.Lock()
	defer fake.getApplicationByNameAndSpaceMutex.Unlock()
	fake.GetApplicationByNameAndSpaceStub = nil
	if fake.getApplicationByNameAndSpaceReturnsOnCall == nil {
		fake.getApplicationByNameAndSpaceReturnsOnCall = make(map[int]struct {
			result1 v3action.Application
			result2 v3action.Warnings
			result3 error
		})
	}
	fake.getApplicationByNameAndSpaceReturnsOnCall[i] = struct {
		result1 v3action.Application
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV3ZeroDowntimeVersionActor) GetCurrentDropletByApplication(arg1 string) (v3action.Droplet, v3action.Warnings, error) {
	fake.getCurrentDropletByApplicationMutex.Lock()
	ret, specificReturn := fake.getCurrentDropletByApplicationReturnsOnCall[len(fake.getCurrentDropletByApplicationArgsForCall)]
	fake.getCurrentDropletByApplicationArgsForCall = append(fake.getCurrentDropletByApplicationArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetCurrentDropletByApplication", []interface{}{arg1})
	fake.getCurrentDropletByApplicationMutex.Unlock()
	if fake.GetCurrentDropletByApplicationStub != nil {
		return fake.GetCurrentDropletByApplicationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getCurrentDropletByApplicationReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeV3ZeroDowntimeVersionActor) GetCurrentDropletByApplicationCallCount() int {
	fake.getCurrentDropletByApplicationMutex.RLock()
	defer fake.getCurrentDropletByApplicationMutex.RUnlock()
	return len(fake.getCurrentDropletByApplicationArgsForCall)
}

func (fake *FakeV3ZeroDowntimeVersionActor) GetCurrentDropletByApplicationCalls(stub func(string) (v3action.Droplet, v3action.Warnings, error)) {
	fake.getCurrentDropletByApplicationMutex.Lock()
	defer fake.getCurrentDropletByApplicationMutex.Unlock()
	fake.GetCurrentDropletByApplicationStub = stub
}

func (fake *FakeV3ZeroDowntimeVersionActor) GetCurrentDropletByApplicationArgsForCall(i int) string {
	fake.getCurrentDropletByApplicationMutex.RLock()
	defer fake.getCurrentDropletByApplicationMutex.RUnlock()
	argsForCall := fake.getCurrentDropletByApplicationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeV3ZeroDowntimeVersionActor) GetCurrentDropletByApplicationReturns(result1 v3action.Droplet, result2 v3action.Warnings, result3 error) {
	fake.getCurrentDropletByApplicationMutex.Lock()
	defer fake.getCurrentDropletByApplicationMutex.Unlock()
	fake.GetCurrentDropletByApplicationStub = nil
	fake.getCurrentDropletByApplicationReturns = struct {
		result1 v3action.Droplet
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV3ZeroDowntimeVersionActor) GetCurrentDropletByApplicationReturnsOnCall(i int, result1 v3action.Droplet, result2 v3action.Warnings, result3 error) {
	fake.getCurrentDropletByApplicationMutex.Lock()
	defer fake.getCurrentDropletByApplicationMutex.Unlock()
	fake.GetCurrentDropletByApplicationStub = nil
	if fake.getCurrentDropletByApplicationReturnsOnCall == nil {
		fake.getCurrentDropletByApplicationReturnsOnCall = make(map[int]struct {
			result1 v3action.Droplet
			result2 v3action.Warnings
			result3 error
		})
	}
	fake.getCurrentDropletByApplicationReturnsOnCall[i] = struct {
		result1 v3action.Droplet
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV3ZeroDowntimeVersionActor) GetStreamingLogsForApplicationByNameAndSpace(arg1 string, arg2 string, arg3 v3action.NOAAClient) (<-chan *v3action.LogMessage, <-chan error, v3action.Warnings, error) {
	fake.getStreamingLogsForApplicationByNameAndSpaceMutex.Lock()
	ret, specificReturn := fake.getStreamingLogsForApplicationByNameAndSpaceReturnsOnCall[len(fake.getStreamingLogsForApplicationByNameAndSpaceArgsForCall)]
	fake.getStreamingLogsForApplicationByNameAndSpaceArgsForCall = append(fake.getStreamingLogsForApplicationByNameAndSpaceArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 v3action.NOAAClient
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetStreamingLogsForApplicationByNameAndSpace", []interface{}{arg1, arg2, arg3})
	fake.getStreamingLogsForApplicationByNameAndSpaceMutex.Unlock()
	if fake.GetStreamingLogsForApplicationByNameAndSpaceStub != nil {
		return fake.GetStreamingLogsForApplicationByNameAndSpaceStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4
	}
	fakeReturns := fake.getStreamingLogsForApplicationByNameAndSpaceReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3, fakeReturns.result4
}

func (fake *FakeV3ZeroDowntimeVersionActor) GetStreamingLogsForApplicationByNameAndSpaceCallCount() int {
	fake.getStreamingLogsForApplicationByNameAndSpaceMutex.RLock()
	defer fake.getStreamingLogsForApplicationByNameAndSpaceMutex.RUnlock()
	return len(fake.getStreamingLogsForApplicationByNameAndSpaceArgsForCall)
}

func (fake *FakeV3ZeroDowntimeVersionActor) GetStreamingLogsForApplicationByNameAndSpaceCalls(stub func(string, string, v3action.NOAAClient) (<-chan *v3action.LogMessage, <-chan error, v3action.Warnings, error)) {
	fake.getStreamingLogsForApplicationByNameAndSpaceMutex.Lock()
	defer fake.getStreamingLogsForApplicationByNameAndSpaceMutex.Unlock()
	fake.GetStreamingLogsForApplicationByNameAndSpaceStub = stub
}

func (fake *FakeV3ZeroDowntimeVersionActor) GetStreamingLogsForApplicationByNameAndSpaceArgsForCall(i int) (string, string, v3action.NOAAClient) {
	fake.getStreamingLogsForApplicationByNameAndSpaceMutex.RLock()
	defer fake.getStreamingLogsForApplicationByNameAndSpaceMutex.RUnlock()
	argsForCall := fake.getStreamingLogsForApplicationByNameAndSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeV3ZeroDowntimeVersionActor) GetStreamingLogsForApplicationByNameAndSpaceReturns(result1 <-chan *v3action.LogMessage, result2 <-chan error, result3 v3action.Warnings, result4 error) {
	fake.getStreamingLogsForApplicationByNameAndSpaceMutex.Lock()
	defer fake.getStreamingLogsForApplicationByNameAndSpaceMutex.Unlock()
	fake.GetStreamingLogsForApplicationByNameAndSpaceStub = nil
	fake.getStreamingLogsForApplicationByNameAndSpaceReturns = struct {
		result1 <-chan *v3action.LogMessage
		result2 <-chan error
		result3 v3action.Warnings
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeV3ZeroDowntimeVersionActor) GetStreamingLogsForApplicationByNameAndSpaceReturnsOnCall(i int, result1 <-chan *v3action.LogMessage, result2 <-chan error, result3 v3action.Warnings, result4 error) {
	fake.getStreamingLogsForApplicationByNameAndSpaceMutex.Lock()
	defer fake.getStreamingLogsForApplicationByNameAndSpaceMutex.Unlock()
	fake.GetStreamingLogsForApplicationByNameAndSpaceStub = nil
	if fake.getStreamingLogsForApplicationByNameAndSpaceReturnsOnCall == nil {
		fake.getStreamingLogsForApplicationByNameAndSpaceReturnsOnCall = make(map[int]struct {
			result1 <-chan *v3action.LogMessage
			result2 <-chan error
			result3 v3action.Warnings
			result4 error
		})
	}
	fake.getStreamingLogsForApplicationByNameAndSpaceReturnsOnCall[i] = struct {
		result1 <-chan *v3action.LogMessage
		result2 <-chan error
		result3 v3action.Warnings
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeV3ZeroDowntimeVersionActor) PollDeployment(arg1 string, arg2 chan<- v3action.Warnings) error {
	fake.pollDeploymentMutex.Lock()
	ret, specificReturn := fake.pollDeploymentReturnsOnCall[len(fake.pollDeploymentArgsForCall)]
	fake.pollDeploymentArgsForCall = append(fake.pollDeploymentArgsForCall, struct {
		arg1 string
		arg2 chan<- v3action.Warnings
	}{arg1, arg2})
	fake.recordInvocation("PollDeployment", []interface{}{arg1, arg2})
	fake.pollDeploymentMutex.Unlock()
	if fake.PollDeploymentStub != nil {
		return fake.PollDeploymentStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.pollDeploymentReturns
	return fakeReturns.result1
}

func (fake *FakeV3ZeroDowntimeVersionActor) PollDeploymentCallCount() int {
	fake.pollDeploymentMutex.RLock()
	defer fake.pollDeploymentMutex.RUnlock()
	return len(fake.pollDeploymentArgsForCall)
}

func (fake *FakeV3ZeroDowntimeVersionActor) PollDeploymentCalls(stub func(string, chan<- v3action.Warnings) error) {
	fake.pollDeploymentMutex.Lock()
	defer fake.pollDeploymentMutex.Unlock()
	fake.PollDeploymentStub = stub
}

func (fake *FakeV3ZeroDowntimeVersionActor) PollDeploymentArgsForCall(i int) (string, chan<- v3action.Warnings) {
	fake.pollDeploymentMutex.RLock()
	defer fake.pollDeploymentMutex.RUnlock()
	argsForCall := fake.pollDeploymentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeV3ZeroDowntimeVersionActor) PollDeploymentReturns(result1 error) {
	fake.pollDeploymentMutex.Lock()
	defer fake.pollDeploymentMutex.Unlock()
	fake.PollDeploymentStub = nil
	fake.pollDeploymentReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeV3ZeroDowntimeVersionActor) PollDeploymentReturnsOnCall(i int, result1 error) {
	fake.pollDeploymentMutex.Lock()
	defer fake.pollDeploymentMutex.Unlock()
	fake.PollDeploymentStub = nil
	if fake.pollDeploymentReturnsOnCall == nil {
		fake.pollDeploymentReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.pollDeploymentReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeV3ZeroDowntimeVersionActor) PollStart(arg1 string, arg2 chan<- v3action.Warnings) error {
	fake.pollStartMutex.Lock()
	ret, specificReturn := fake.pollStartReturnsOnCall[len(fake.pollStartArgsForCall)]
	fake.pollStartArgsForCall = append(fake.pollStartArgsForCall, struct {
		arg1 string
		arg2 chan<- v3action.Warnings
	}{arg1, arg2})
	fake.recordInvocation("PollStart", []interface{}{arg1, arg2})
	fake.pollStartMutex.Unlock()
	if fake.PollStartStub != nil {
		return fake.PollStartStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.pollStartReturns
	return fakeReturns.result1
}

func (fake *FakeV3ZeroDowntimeVersionActor) PollStartCallCount() int {
	fake.pollStartMutex.RLock()
	defer fake.pollStartMutex.RUnlock()
	return len(fake.pollStartArgsForCall)
}

func (fake *FakeV3ZeroDowntimeVersionActor) PollStartCalls(stub func(string, chan<- v3action.Warnings) error) {
	fake.pollStartMutex.Lock()
	defer fake.pollStartMutex.Unlock()
	fake.PollStartStub = stub
}

func (fake *FakeV3ZeroDowntimeVersionActor) PollStartArgsForCall(i int) (string, chan<- v3action.Warnings) {
	fake.pollStartMutex.RLock()
	defer fake.pollStartMutex.RUnlock()
	argsForCall := fake.pollStartArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeV3ZeroDowntimeVersionActor) PollStartReturns(result1 error) {
	fake.pollStartMutex.Lock()
	defer fake.pollStartMutex.Unlock()
	fake.PollStartStub = nil
	fake.pollStartReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeV3ZeroDowntimeVersionActor) PollStartReturnsOnCall(i int, result1 error) {
	fake.pollStartMutex.Lock()
	defer fake.pollStartMutex.Unlock()
	fake.PollStartStub = nil
	if fake.pollStartReturnsOnCall == nil {
		fake.pollStartReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.pollStartReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeV3ZeroDowntimeVersionActor) RestartApplication(arg1 string) (v3action.Warnings, error) {
	fake.restartApplicationMutex.Lock()
	ret, specificReturn := fake.restartApplicationReturnsOnCall[len(fake.restartApplicationArgsForCall)]
	fake.restartApplicationArgsForCall = append(fake.restartApplicationArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("RestartApplication", []interface{}{arg1})
	fake.restartApplicationMutex.Unlock()
	if fake.RestartApplicationStub != nil {
		return fake.RestartApplicationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.restartApplicationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeV3ZeroDowntimeVersionActor) RestartApplicationCallCount() int {
	fake.restartApplicationMutex.RLock()
	defer fake.restartApplicationMutex.RUnlock()
	return len(fake.restartApplicationArgsForCall)
}

func (fake *FakeV3ZeroDowntimeVersionActor) RestartApplicationCalls(stub func(string) (v3action.Warnings, error)) {
	fake.restartApplicationMutex.Lock()
	defer fake.restartApplicationMutex.Unlock()
	fake.RestartApplicationStub = stub
}

func (fake *FakeV3ZeroDowntimeVersionActor) RestartApplicationArgsForCall(i int) string {
	fake.restartApplicationMutex.RLock()
	defer fake.restartApplicationMutex.RUnlock()
	argsForCall := fake.restartApplicationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeV3ZeroDowntimeVersionActor) RestartApplicationReturns(result1 v3action.Warnings, result2 error) {
	fake.restartApplicationMutex.Lock()
	defer fake.restartApplicationMutex.Unlock()
	fake.RestartApplicationStub = nil
	fake.restartApplicationReturns = struct {
		result1 v3action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeV3ZeroDowntimeVersionActor) RestartApplicationReturnsOnCall(i int, result1 v3action.Warnings, result2 error) {
	fake.restartApplicationMutex.Lock()
	defer fake.restartApplicationMutex.Unlock()
	fake.RestartApplicationStub = nil
	if fake.restartApplicationReturnsOnCall == nil {
		fake.restartApplicationReturnsOnCall = make(map[int]struct {
			result1 v3action.Warnings
			result2 error
		})
	}
	fake.restartApplicationReturnsOnCall[i] = struct {
		result1 v3action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeV3ZeroDowntimeVersionActor) SetApplicationDropletByApplicationNameAndSpace(arg1 string, arg2 string, arg3 string) (v3action.Warnings, error) {
	fake.setApplicationDropletByApplicationNameAndSpaceMutex.Lock()
	ret, specificReturn := fake.setApplicationDropletByApplicationNameAndSpaceReturnsOnCall[len(fake.setApplicationDropletByApplicationNameAndSpaceArgsForCall)]
	fake.setApplicationDropletByApplicationNameAndSpaceArgsForCall = append(fake.setApplicationDropletByApplicationNameAndSpaceArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("SetApplicationDropletByApplicationNameAndSpace", []interface{}{arg1, arg2, arg3})
	fake.setApplicationDropletByApplicationNameAndSpaceMutex.Unlock()
	if fake.SetApplicationDropletByApplicationNameAndSpaceStub != nil {
		return fake.SetApplicationDropletByApplicationNameAndSpaceStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setApplicationDropletByApplicationNameAndSpaceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeV3ZeroDowntimeVersionActor) SetApplicationDropletByApplicationNameAndSpaceCallCount() int {
	fake.setApplicationDropletByApplicationNameAndSpaceMutex.RLock()
	defer fake.setApplicationDropletByApplicationNameAndSpaceMutex.RUnlock()
	return len(fake.setApplicationDropletByApplicationNameAndSpaceArgsForCall)
}

func (fake *FakeV3ZeroDowntimeVersionActor) SetApplicationDropletByApplicationNameAndSpaceCalls(stub func(string, string, string) (v3action.Warnings, error)) {
	fake.setApplicationDropletByApplicationNameAndSpaceMutex.Lock()
	defer fake.setApplicationDropletByApplicationNameAndSpaceMutex.Unlock()
	fake.SetApplicationDropletByApplicationNameAndSpaceStub = stub
}

func (fake *FakeV3ZeroDowntimeVersionActor) SetApplicationDropletByApplicationNameAndSpaceArgsForCall(i int) (string, string, string) {
	fake.setApplicationDropletByApplicationNameAndSpaceMutex.RLock()
	defer fake.setApplicationDropletByApplicationNameAndSpaceMutex.RUnlock()
	argsForCall := fake.setApplicationDropletByApplicationNameAndSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeV3ZeroDowntimeVersionActor) SetApplicationDropletByApplicationNameAndSpaceReturns(result1 v3action.Warnings, result2 error) {
	fake.setApplicationDropletByApplicationNameAndSpaceMutex.Lock()
	defer fake.setApplicationDropletByApplicationNameAndSpaceMutex.Unlock()
	fake.SetApplicationDropletByApplicationNameAndSpaceStub = nil
	fake.setApplicationDropletByApplicationNameAndSpaceReturns = struct {
		result1 v3action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeV3ZeroDowntimeVersionActor) SetApplicationDropletByApplicationNameAndSpaceReturnsOnCall(i int, result1 v3action.Warnings, result2 error) {
	fake.setApplicationDropletByApplicationNameAndSpaceMutex.Lock()
	defer fake.setApplicationDropletByApplicationNameAndSpaceMutex.Unlock()
	fake.SetApplicationDropletByApplicationNameAndSpaceStub = nil
	if fake.setApplicationDropletByApplicationNameAndSpaceReturnsOnCall == nil {
		fake.setApplicationDropletByApplicationNameAndSpaceReturnsOnCall = make(map[int]struct {
			result1 v3action.Warnings
			result2 error
		})
	}
	fake.setApplicationDropletByApplicationNameAndSpaceReturnsOnCall[i] = struct {
		result1 v3action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeV3ZeroDowntimeVersionActor) StagePackage(arg1 string, arg2 string) (<-chan v3action.Droplet, <-chan v3action.Warnings, <-chan error) {
	fake.stagePackageMutex.Lock()
	ret, specificReturn := fake.stagePackageReturnsOnCall[len(fake.stagePackageArgsForCall)]
	fake.stagePackageArgsForCall = append(fake.stagePackageArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("StagePackage", []interface{}{arg1, arg2})
	fake.stagePackageMutex.Unlock()
	if fake.StagePackageStub != nil {
		return fake.StagePackageStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.stagePackageReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeV3ZeroDowntimeVersionActor) StagePackageCallCount() int {
	fake.stagePackageMutex.RLock()
	defer fake.stagePackageMutex.RUnlock()
	return len(fake.stagePackageArgsForCall)
}

func (fake *FakeV3ZeroDowntimeVersionActor) StagePackageCalls(stub func(string, string) (<-chan v3action.Droplet, <-chan v3action.Warnings, <-chan error)) {
	fake.stagePackageMutex.Lock()
	defer fake.stagePackageMutex.Unlock()
	fake.StagePackageStub = stub
}

func (fake *FakeV3ZeroDowntimeVersionActor) StagePackageArgsForCall(i int) (string, string) {
	fake.stagePackageMutex.RLock()
	defer fake.stagePackageMutex.RUnlock()
	argsForCall := fake.stagePackageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeV3ZeroDowntimeVersionActor) StagePackageReturns(result1 <-chan v3action.Droplet, result2 <-chan v3action.Warnings, result3 <-chan error) {
	fake.stagePackageMutex.Lock()
	defer fake.stagePackageMutex.Unlock()
	fake.StagePackageStub = nil
	fake.stagePackageReturns = struct {
		result1 <-chan v3action.Droplet
		result2 <-chan v3action.Warnings
		result3 <-chan error
	}{result1, result2, result3}
}

func (fake *FakeV3ZeroDowntimeVersionActor) StagePackageReturnsOnCall(i int, result1 <-chan v3action.Droplet, result2 <-chan v3action.Warnings, result3 <-chan error) {
	fake.stagePackageMutex.Lock()
	defer fake.stagePackageMutex.Unlock()
	fake.StagePackageStub = nil
	if fake.stagePackageReturnsOnCall == nil {
		fake.stagePackageReturnsOnCall = make(map[int]struct {
			result1 <-chan v3action.Droplet
			result2 <-chan v3action.Warnings
			result3 <-chan error
		})
	}
	fake.stagePackageReturnsOnCall[i] = struct {
		result1 <-chan v3action.Droplet
		result2 <-chan v3action.Warnings
		result3 <-chan error
	}{result1, result2, result3}
}

func (fake *FakeV3ZeroDowntimeVersionActor) UpdateApplication(arg1 v3action.Application) (v3action.Application, v3action.Warnings, error) {
	fake.updateApplicationMutex.Lock()
	ret, specificReturn := fake.updateApplicationReturnsOnCall[len(fake.updateApplicationArgsForCall)]
	fake.updateApplicationArgsForCall = append(fake.updateApplicationArgsForCall, struct {
		arg1 v3action.Application
	}{arg1})
	fake.recordInvocation("UpdateApplication", []interface{}{arg1})
	fake.updateApplicationMutex.Unlock()
	if fake.UpdateApplicationStub != nil {
		return fake.UpdateApplicationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.updateApplicationReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeV3ZeroDowntimeVersionActor) UpdateApplicationCallCount() int {
	fake.updateApplicationMutex.RLock()
	defer fake.updateApplicationMutex.RUnlock()
	return len(fake.updateApplicationArgsForCall)
}

func (fake *FakeV3ZeroDowntimeVersionActor) UpdateApplicationCalls(stub func(v3action.Application) (v3action.Application, v3action.Warnings, error)) {
	fake.updateApplicationMutex.Lock()
	defer fake.updateApplicationMutex.Unlock()
	fake.UpdateApplicationStub = stub
}

func (fake *FakeV3ZeroDowntimeVersionActor) UpdateApplicationArgsForCall(i int) v3action.Application {
	fake.updateApplicationMutex.RLock()
	defer fake.updateApplicationMutex.RUnlock()
	argsForCall := fake.updateApplicationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeV3ZeroDowntimeVersionActor) UpdateApplicationReturns(result1 v3action.Application, result2 v3action.Warnings, result3 error) {
	fake.updateApplicationMutex.Lock()
	defer fake.updateApplicationMutex.Unlock()
	fake.UpdateApplicationStub = nil
	fake.updateApplicationReturns = struct {
		result1 v3action.Application
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV3ZeroDowntimeVersionActor) UpdateApplicationReturnsOnCall(i int, result1 v3action.Application, result2 v3action.Warnings, result3 error) {
	fake.updateApplicationMutex.Lock()
	defer fake.updateApplicationMutex.Unlock()
	fake.UpdateApplicationStub = nil
	if fake.updateApplicationReturnsOnCall == nil {
		fake.updateApplicationReturnsOnCall = make(map[int]struct {
			result1 v3action.Application
			result2 v3action.Warnings
			result3 error
		})
	}
	fake.updateApplicationReturnsOnCall[i] = struct {
		result1 v3action.Application
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV3ZeroDowntimeVersionActor) ZeroDowntimePollStart(arg1 string, arg2 chan<- v3action.Warnings) error {
	fake.zeroDowntimePollStartMutex.Lock()
	ret, specificReturn := fake.zeroDowntimePollStartReturnsOnCall[len(fake.zeroDowntimePollStartArgsForCall)]
	fake.zeroDowntimePollStartArgsForCall = append(fake.zeroDowntimePollStartArgsForCall, struct {
		arg1 string
		arg2 chan<- v3action.Warnings
	}{arg1, arg2})
	fake.recordInvocation("ZeroDowntimePollStart", []interface{}{arg1, arg2})
	fake.zeroDowntimePollStartMutex.Unlock()
	if fake.ZeroDowntimePollStartStub != nil {
		return fake.ZeroDowntimePollStartStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.zeroDowntimePollStartReturns
	return fakeReturns.result1
}

func (fake *FakeV3ZeroDowntimeVersionActor) ZeroDowntimePollStartCallCount() int {
	fake.zeroDowntimePollStartMutex.RLock()
	defer fake.zeroDowntimePollStartMutex.RUnlock()
	return len(fake.zeroDowntimePollStartArgsForCall)
}

func (fake *FakeV3ZeroDowntimeVersionActor) ZeroDowntimePollStartCalls(stub func(string, chan<- v3action.Warnings) error) {
	fake.zeroDowntimePollStartMutex.Lock()
	defer fake.zeroDowntimePollStartMutex.Unlock()
	fake.ZeroDowntimePollStartStub = stub
}

func (fake *FakeV3ZeroDowntimeVersionActor) ZeroDowntimePollStartArgsForCall(i int) (string, chan<- v3action.Warnings) {
	fake.zeroDowntimePollStartMutex.RLock()
	defer fake.zeroDowntimePollStartMutex.RUnlock()
	argsForCall := fake.zeroDowntimePollStartArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeV3ZeroDowntimeVersionActor) ZeroDowntimePollStartReturns(result1 error) {
	fake.zeroDowntimePollStartMutex.Lock()
	defer fake.zeroDowntimePollStartMutex.Unlock()
	fake.ZeroDowntimePollStartStub = nil
	fake.zeroDowntimePollStartReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeV3ZeroDowntimeVersionActor) ZeroDowntimePollStartReturnsOnCall(i int, result1 error) {
	fake.zeroDowntimePollStartMutex.Lock()
	defer fake.zeroDowntimePollStartMutex.Unlock()
	fake.ZeroDowntimePollStartStub = nil
	if fake.zeroDowntimePollStartReturnsOnCall == nil {
		fake.zeroDowntimePollStartReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.zeroDowntimePollStartReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeV3ZeroDowntimeVersionActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cloudControllerAPIVersionMutex.RLock()
	defer fake.cloudControllerAPIVersionMutex.RUnlock()
	fake.createAndUploadBitsPackageByApplicationNameAndSpaceMutex.RLock()
	defer fake.createAndUploadBitsPackageByApplicationNameAndSpaceMutex.RUnlock()
	fake.createApplicationInSpaceMutex.RLock()
	defer fake.createApplicationInSpaceMutex.RUnlock()
	fake.createDeploymentMutex.RLock()
	defer fake.createDeploymentMutex.RUnlock()
	fake.createDockerPackageByApplicationNameAndSpaceMutex.RLock()
	defer fake.createDockerPackageByApplicationNameAndSpaceMutex.RUnlock()
	fake.getApplicationByNameAndSpaceMutex.RLock()
	defer fake.getApplicationByNameAndSpaceMutex.RUnlock()
	fake.getCurrentDropletByApplicationMutex.RLock()
	defer fake.getCurrentDropletByApplicationMutex.RUnlock()
	fake.getStreamingLogsForApplicationByNameAndSpaceMutex.RLock()
	defer fake.getStreamingLogsForApplicationByNameAndSpaceMutex.RUnlock()
	fake.pollDeploymentMutex.RLock()
	defer fake.pollDeploymentMutex.RUnlock()
	fake.pollStartMutex.RLock()
	defer fake.pollStartMutex.RUnlock()
	fake.restartApplicationMutex.RLock()
	defer fake.restartApplicationMutex.RUnlock()
	fake.setApplicationDropletByApplicationNameAndSpaceMutex.RLock()
	defer fake.setApplicationDropletByApplicationNameAndSpaceMutex.RUnlock()
	fake.stagePackageMutex.RLock()
	defer fake.stagePackageMutex.RUnlock()
	fake.updateApplicationMutex.RLock()
	defer fake.updateApplicationMutex.RUnlock()
	fake.zeroDowntimePollStartMutex.RLock()
	defer fake.zeroDowntimePollStartMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeV3ZeroDowntimeVersionActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v6.V3ZeroDowntimeVersionActor = new(FakeV3ZeroDowntimeVersionActor)
