// Code generated by counterfeiter. DO NOT EDIT.
package v6fakes

import (
	sync "sync"

	v3action "code.cloudfoundry.org/cli/actor/v3action"
	v6 "code.cloudfoundry.org/cli/command/v6"
)

type FakeIsolationSegmentsActor struct {
	CloudControllerAPIVersionStub        func() string
	cloudControllerAPIVersionMutex       sync.RWMutex
	cloudControllerAPIVersionArgsForCall []struct {
	}
	cloudControllerAPIVersionReturns struct {
		result1 string
	}
	cloudControllerAPIVersionReturnsOnCall map[int]struct {
		result1 string
	}
	GetIsolationSegmentSummariesStub        func() ([]v3action.IsolationSegmentSummary, v3action.Warnings, error)
	getIsolationSegmentSummariesMutex       sync.RWMutex
	getIsolationSegmentSummariesArgsForCall []struct {
	}
	getIsolationSegmentSummariesReturns struct {
		result1 []v3action.IsolationSegmentSummary
		result2 v3action.Warnings
		result3 error
	}
	getIsolationSegmentSummariesReturnsOnCall map[int]struct {
		result1 []v3action.IsolationSegmentSummary
		result2 v3action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIsolationSegmentsActor) CloudControllerAPIVersion() string {
	fake.cloudControllerAPIVersionMutex.Lock()
	ret, specificReturn := fake.cloudControllerAPIVersionReturnsOnCall[len(fake.cloudControllerAPIVersionArgsForCall)]
	fake.cloudControllerAPIVersionArgsForCall = append(fake.cloudControllerAPIVersionArgsForCall, struct {
	}{})
	fake.recordInvocation("CloudControllerAPIVersion", []interface{}{})
	fake.cloudControllerAPIVersionMutex.Unlock()
	if fake.CloudControllerAPIVersionStub != nil {
		return fake.CloudControllerAPIVersionStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.cloudControllerAPIVersionReturns
	return fakeReturns.result1
}

func (fake *FakeIsolationSegmentsActor) CloudControllerAPIVersionCallCount() int {
	fake.cloudControllerAPIVersionMutex.RLock()
	defer fake.cloudControllerAPIVersionMutex.RUnlock()
	return len(fake.cloudControllerAPIVersionArgsForCall)
}

func (fake *FakeIsolationSegmentsActor) CloudControllerAPIVersionCalls(stub func() string) {
	fake.cloudControllerAPIVersionMutex.Lock()
	defer fake.cloudControllerAPIVersionMutex.Unlock()
	fake.CloudControllerAPIVersionStub = stub
}

func (fake *FakeIsolationSegmentsActor) CloudControllerAPIVersionReturns(result1 string) {
	fake.cloudControllerAPIVersionMutex.Lock()
	defer fake.cloudControllerAPIVersionMutex.Unlock()
	fake.CloudControllerAPIVersionStub = nil
	fake.cloudControllerAPIVersionReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeIsolationSegmentsActor) CloudControllerAPIVersionReturnsOnCall(i int, result1 string) {
	fake.cloudControllerAPIVersionMutex.Lock()
	defer fake.cloudControllerAPIVersionMutex.Unlock()
	fake.CloudControllerAPIVersionStub = nil
	if fake.cloudControllerAPIVersionReturnsOnCall == nil {
		fake.cloudControllerAPIVersionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.cloudControllerAPIVersionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeIsolationSegmentsActor) GetIsolationSegmentSummaries() ([]v3action.IsolationSegmentSummary, v3action.Warnings, error) {
	fake.getIsolationSegmentSummariesMutex.Lock()
	ret, specificReturn := fake.getIsolationSegmentSummariesReturnsOnCall[len(fake.getIsolationSegmentSummariesArgsForCall)]
	fake.getIsolationSegmentSummariesArgsForCall = append(fake.getIsolationSegmentSummariesArgsForCall, struct {
	}{})
	fake.recordInvocation("GetIsolationSegmentSummaries", []interface{}{})
	fake.getIsolationSegmentSummariesMutex.Unlock()
	if fake.GetIsolationSegmentSummariesStub != nil {
		return fake.GetIsolationSegmentSummariesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getIsolationSegmentSummariesReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeIsolationSegmentsActor) GetIsolationSegmentSummariesCallCount() int {
	fake.getIsolationSegmentSummariesMutex.RLock()
	defer fake.getIsolationSegmentSummariesMutex.RUnlock()
	return len(fake.getIsolationSegmentSummariesArgsForCall)
}

func (fake *FakeIsolationSegmentsActor) GetIsolationSegmentSummariesCalls(stub func() ([]v3action.IsolationSegmentSummary, v3action.Warnings, error)) {
	fake.getIsolationSegmentSummariesMutex.Lock()
	defer fake.getIsolationSegmentSummariesMutex.Unlock()
	fake.GetIsolationSegmentSummariesStub = stub
}

func (fake *FakeIsolationSegmentsActor) GetIsolationSegmentSummariesReturns(result1 []v3action.IsolationSegmentSummary, result2 v3action.Warnings, result3 error) {
	fake.getIsolationSegmentSummariesMutex.Lock()
	defer fake.getIsolationSegmentSummariesMutex.Unlock()
	fake.GetIsolationSegmentSummariesStub = nil
	fake.getIsolationSegmentSummariesReturns = struct {
		result1 []v3action.IsolationSegmentSummary
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeIsolationSegmentsActor) GetIsolationSegmentSummariesReturnsOnCall(i int, result1 []v3action.IsolationSegmentSummary, result2 v3action.Warnings, result3 error) {
	fake.getIsolationSegmentSummariesMutex.Lock()
	defer fake.getIsolationSegmentSummariesMutex.Unlock()
	fake.GetIsolationSegmentSummariesStub = nil
	if fake.getIsolationSegmentSummariesReturnsOnCall == nil {
		fake.getIsolationSegmentSummariesReturnsOnCall = make(map[int]struct {
			result1 []v3action.IsolationSegmentSummary
			result2 v3action.Warnings
			result3 error
		})
	}
	fake.getIsolationSegmentSummariesReturnsOnCall[i] = struct {
		result1 []v3action.IsolationSegmentSummary
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeIsolationSegmentsActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cloudControllerAPIVersionMutex.RLock()
	defer fake.cloudControllerAPIVersionMutex.RUnlock()
	fake.getIsolationSegmentSummariesMutex.RLock()
	defer fake.getIsolationSegmentSummariesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIsolationSegmentsActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v6.IsolationSegmentsActor = new(FakeIsolationSegmentsActor)
