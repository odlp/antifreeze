// Code generated by counterfeiter. DO NOT EDIT.
package v6fakes

import (
	sync "sync"

	v2action "code.cloudfoundry.org/cli/actor/v2action"
	v6 "code.cloudfoundry.org/cli/command/v6"
)

type FakeServiceAccessActor struct {
	GetServiceBrokerSummariesStub        func(string, string, string) ([]v2action.ServiceBrokerSummary, v2action.Warnings, error)
	getServiceBrokerSummariesMutex       sync.RWMutex
	getServiceBrokerSummariesArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	getServiceBrokerSummariesReturns struct {
		result1 []v2action.ServiceBrokerSummary
		result2 v2action.Warnings
		result3 error
	}
	getServiceBrokerSummariesReturnsOnCall map[int]struct {
		result1 []v2action.ServiceBrokerSummary
		result2 v2action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceAccessActor) GetServiceBrokerSummaries(arg1 string, arg2 string, arg3 string) ([]v2action.ServiceBrokerSummary, v2action.Warnings, error) {
	fake.getServiceBrokerSummariesMutex.Lock()
	ret, specificReturn := fake.getServiceBrokerSummariesReturnsOnCall[len(fake.getServiceBrokerSummariesArgsForCall)]
	fake.getServiceBrokerSummariesArgsForCall = append(fake.getServiceBrokerSummariesArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetServiceBrokerSummaries", []interface{}{arg1, arg2, arg3})
	fake.getServiceBrokerSummariesMutex.Unlock()
	if fake.GetServiceBrokerSummariesStub != nil {
		return fake.GetServiceBrokerSummariesStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getServiceBrokerSummariesReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeServiceAccessActor) GetServiceBrokerSummariesCallCount() int {
	fake.getServiceBrokerSummariesMutex.RLock()
	defer fake.getServiceBrokerSummariesMutex.RUnlock()
	return len(fake.getServiceBrokerSummariesArgsForCall)
}

func (fake *FakeServiceAccessActor) GetServiceBrokerSummariesCalls(stub func(string, string, string) ([]v2action.ServiceBrokerSummary, v2action.Warnings, error)) {
	fake.getServiceBrokerSummariesMutex.Lock()
	defer fake.getServiceBrokerSummariesMutex.Unlock()
	fake.GetServiceBrokerSummariesStub = stub
}

func (fake *FakeServiceAccessActor) GetServiceBrokerSummariesArgsForCall(i int) (string, string, string) {
	fake.getServiceBrokerSummariesMutex.RLock()
	defer fake.getServiceBrokerSummariesMutex.RUnlock()
	argsForCall := fake.getServiceBrokerSummariesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceAccessActor) GetServiceBrokerSummariesReturns(result1 []v2action.ServiceBrokerSummary, result2 v2action.Warnings, result3 error) {
	fake.getServiceBrokerSummariesMutex.Lock()
	defer fake.getServiceBrokerSummariesMutex.Unlock()
	fake.GetServiceBrokerSummariesStub = nil
	fake.getServiceBrokerSummariesReturns = struct {
		result1 []v2action.ServiceBrokerSummary
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeServiceAccessActor) GetServiceBrokerSummariesReturnsOnCall(i int, result1 []v2action.ServiceBrokerSummary, result2 v2action.Warnings, result3 error) {
	fake.getServiceBrokerSummariesMutex.Lock()
	defer fake.getServiceBrokerSummariesMutex.Unlock()
	fake.GetServiceBrokerSummariesStub = nil
	if fake.getServiceBrokerSummariesReturnsOnCall == nil {
		fake.getServiceBrokerSummariesReturnsOnCall = make(map[int]struct {
			result1 []v2action.ServiceBrokerSummary
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.getServiceBrokerSummariesReturnsOnCall[i] = struct {
		result1 []v2action.ServiceBrokerSummary
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeServiceAccessActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getServiceBrokerSummariesMutex.RLock()
	defer fake.getServiceBrokerSummariesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServiceAccessActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v6.ServiceAccessActor = new(FakeServiceAccessActor)
