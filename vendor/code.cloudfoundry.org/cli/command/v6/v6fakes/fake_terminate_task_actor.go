// Code generated by counterfeiter. DO NOT EDIT.
package v6fakes

import (
	sync "sync"

	v3action "code.cloudfoundry.org/cli/actor/v3action"
	v6 "code.cloudfoundry.org/cli/command/v6"
)

type FakeTerminateTaskActor struct {
	GetApplicationByNameAndSpaceStub        func(string, string) (v3action.Application, v3action.Warnings, error)
	getApplicationByNameAndSpaceMutex       sync.RWMutex
	getApplicationByNameAndSpaceArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getApplicationByNameAndSpaceReturns struct {
		result1 v3action.Application
		result2 v3action.Warnings
		result3 error
	}
	getApplicationByNameAndSpaceReturnsOnCall map[int]struct {
		result1 v3action.Application
		result2 v3action.Warnings
		result3 error
	}
	GetTaskBySequenceIDAndApplicationStub        func(int, string) (v3action.Task, v3action.Warnings, error)
	getTaskBySequenceIDAndApplicationMutex       sync.RWMutex
	getTaskBySequenceIDAndApplicationArgsForCall []struct {
		arg1 int
		arg2 string
	}
	getTaskBySequenceIDAndApplicationReturns struct {
		result1 v3action.Task
		result2 v3action.Warnings
		result3 error
	}
	getTaskBySequenceIDAndApplicationReturnsOnCall map[int]struct {
		result1 v3action.Task
		result2 v3action.Warnings
		result3 error
	}
	TerminateTaskStub        func(string) (v3action.Task, v3action.Warnings, error)
	terminateTaskMutex       sync.RWMutex
	terminateTaskArgsForCall []struct {
		arg1 string
	}
	terminateTaskReturns struct {
		result1 v3action.Task
		result2 v3action.Warnings
		result3 error
	}
	terminateTaskReturnsOnCall map[int]struct {
		result1 v3action.Task
		result2 v3action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTerminateTaskActor) GetApplicationByNameAndSpace(arg1 string, arg2 string) (v3action.Application, v3action.Warnings, error) {
	fake.getApplicationByNameAndSpaceMutex.Lock()
	ret, specificReturn := fake.getApplicationByNameAndSpaceReturnsOnCall[len(fake.getApplicationByNameAndSpaceArgsForCall)]
	fake.getApplicationByNameAndSpaceArgsForCall = append(fake.getApplicationByNameAndSpaceArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetApplicationByNameAndSpace", []interface{}{arg1, arg2})
	fake.getApplicationByNameAndSpaceMutex.Unlock()
	if fake.GetApplicationByNameAndSpaceStub != nil {
		return fake.GetApplicationByNameAndSpaceStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getApplicationByNameAndSpaceReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeTerminateTaskActor) GetApplicationByNameAndSpaceCallCount() int {
	fake.getApplicationByNameAndSpaceMutex.RLock()
	defer fake.getApplicationByNameAndSpaceMutex.RUnlock()
	return len(fake.getApplicationByNameAndSpaceArgsForCall)
}

func (fake *FakeTerminateTaskActor) GetApplicationByNameAndSpaceCalls(stub func(string, string) (v3action.Application, v3action.Warnings, error)) {
	fake.getApplicationByNameAndSpaceMutex.Lock()
	defer fake.getApplicationByNameAndSpaceMutex.Unlock()
	fake.GetApplicationByNameAndSpaceStub = stub
}

func (fake *FakeTerminateTaskActor) GetApplicationByNameAndSpaceArgsForCall(i int) (string, string) {
	fake.getApplicationByNameAndSpaceMutex.RLock()
	defer fake.getApplicationByNameAndSpaceMutex.RUnlock()
	argsForCall := fake.getApplicationByNameAndSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTerminateTaskActor) GetApplicationByNameAndSpaceReturns(result1 v3action.Application, result2 v3action.Warnings, result3 error) {
	fake.getApplicationByNameAndSpaceMutex.Lock()
	defer fake.getApplicationByNameAndSpaceMutex.Unlock()
	fake.GetApplicationByNameAndSpaceStub = nil
	fake.getApplicationByNameAndSpaceReturns = struct {
		result1 v3action.Application
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeTerminateTaskActor) GetApplicationByNameAndSpaceReturnsOnCall(i int, result1 v3action.Application, result2 v3action.Warnings, result3 error) {
	fake.getApplicationByNameAndSpaceMutex.Lock()
	defer fake.getApplicationByNameAndSpaceMutex.Unlock()
	fake.GetApplicationByNameAndSpaceStub = nil
	if fake.getApplicationByNameAndSpaceReturnsOnCall == nil {
		fake.getApplicationByNameAndSpaceReturnsOnCall = make(map[int]struct {
			result1 v3action.Application
			result2 v3action.Warnings
			result3 error
		})
	}
	fake.getApplicationByNameAndSpaceReturnsOnCall[i] = struct {
		result1 v3action.Application
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeTerminateTaskActor) GetTaskBySequenceIDAndApplication(arg1 int, arg2 string) (v3action.Task, v3action.Warnings, error) {
	fake.getTaskBySequenceIDAndApplicationMutex.Lock()
	ret, specificReturn := fake.getTaskBySequenceIDAndApplicationReturnsOnCall[len(fake.getTaskBySequenceIDAndApplicationArgsForCall)]
	fake.getTaskBySequenceIDAndApplicationArgsForCall = append(fake.getTaskBySequenceIDAndApplicationArgsForCall, struct {
		arg1 int
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetTaskBySequenceIDAndApplication", []interface{}{arg1, arg2})
	fake.getTaskBySequenceIDAndApplicationMutex.Unlock()
	if fake.GetTaskBySequenceIDAndApplicationStub != nil {
		return fake.GetTaskBySequenceIDAndApplicationStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getTaskBySequenceIDAndApplicationReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeTerminateTaskActor) GetTaskBySequenceIDAndApplicationCallCount() int {
	fake.getTaskBySequenceIDAndApplicationMutex.RLock()
	defer fake.getTaskBySequenceIDAndApplicationMutex.RUnlock()
	return len(fake.getTaskBySequenceIDAndApplicationArgsForCall)
}

func (fake *FakeTerminateTaskActor) GetTaskBySequenceIDAndApplicationCalls(stub func(int, string) (v3action.Task, v3action.Warnings, error)) {
	fake.getTaskBySequenceIDAndApplicationMutex.Lock()
	defer fake.getTaskBySequenceIDAndApplicationMutex.Unlock()
	fake.GetTaskBySequenceIDAndApplicationStub = stub
}

func (fake *FakeTerminateTaskActor) GetTaskBySequenceIDAndApplicationArgsForCall(i int) (int, string) {
	fake.getTaskBySequenceIDAndApplicationMutex.RLock()
	defer fake.getTaskBySequenceIDAndApplicationMutex.RUnlock()
	argsForCall := fake.getTaskBySequenceIDAndApplicationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTerminateTaskActor) GetTaskBySequenceIDAndApplicationReturns(result1 v3action.Task, result2 v3action.Warnings, result3 error) {
	fake.getTaskBySequenceIDAndApplicationMutex.Lock()
	defer fake.getTaskBySequenceIDAndApplicationMutex.Unlock()
	fake.GetTaskBySequenceIDAndApplicationStub = nil
	fake.getTaskBySequenceIDAndApplicationReturns = struct {
		result1 v3action.Task
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeTerminateTaskActor) GetTaskBySequenceIDAndApplicationReturnsOnCall(i int, result1 v3action.Task, result2 v3action.Warnings, result3 error) {
	fake.getTaskBySequenceIDAndApplicationMutex.Lock()
	defer fake.getTaskBySequenceIDAndApplicationMutex.Unlock()
	fake.GetTaskBySequenceIDAndApplicationStub = nil
	if fake.getTaskBySequenceIDAndApplicationReturnsOnCall == nil {
		fake.getTaskBySequenceIDAndApplicationReturnsOnCall = make(map[int]struct {
			result1 v3action.Task
			result2 v3action.Warnings
			result3 error
		})
	}
	fake.getTaskBySequenceIDAndApplicationReturnsOnCall[i] = struct {
		result1 v3action.Task
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeTerminateTaskActor) TerminateTask(arg1 string) (v3action.Task, v3action.Warnings, error) {
	fake.terminateTaskMutex.Lock()
	ret, specificReturn := fake.terminateTaskReturnsOnCall[len(fake.terminateTaskArgsForCall)]
	fake.terminateTaskArgsForCall = append(fake.terminateTaskArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("TerminateTask", []interface{}{arg1})
	fake.terminateTaskMutex.Unlock()
	if fake.TerminateTaskStub != nil {
		return fake.TerminateTaskStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.terminateTaskReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeTerminateTaskActor) TerminateTaskCallCount() int {
	fake.terminateTaskMutex.RLock()
	defer fake.terminateTaskMutex.RUnlock()
	return len(fake.terminateTaskArgsForCall)
}

func (fake *FakeTerminateTaskActor) TerminateTaskCalls(stub func(string) (v3action.Task, v3action.Warnings, error)) {
	fake.terminateTaskMutex.Lock()
	defer fake.terminateTaskMutex.Unlock()
	fake.TerminateTaskStub = stub
}

func (fake *FakeTerminateTaskActor) TerminateTaskArgsForCall(i int) string {
	fake.terminateTaskMutex.RLock()
	defer fake.terminateTaskMutex.RUnlock()
	argsForCall := fake.terminateTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTerminateTaskActor) TerminateTaskReturns(result1 v3action.Task, result2 v3action.Warnings, result3 error) {
	fake.terminateTaskMutex.Lock()
	defer fake.terminateTaskMutex.Unlock()
	fake.TerminateTaskStub = nil
	fake.terminateTaskReturns = struct {
		result1 v3action.Task
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeTerminateTaskActor) TerminateTaskReturnsOnCall(i int, result1 v3action.Task, result2 v3action.Warnings, result3 error) {
	fake.terminateTaskMutex.Lock()
	defer fake.terminateTaskMutex.Unlock()
	fake.TerminateTaskStub = nil
	if fake.terminateTaskReturnsOnCall == nil {
		fake.terminateTaskReturnsOnCall = make(map[int]struct {
			result1 v3action.Task
			result2 v3action.Warnings
			result3 error
		})
	}
	fake.terminateTaskReturnsOnCall[i] = struct {
		result1 v3action.Task
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeTerminateTaskActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getApplicationByNameAndSpaceMutex.RLock()
	defer fake.getApplicationByNameAndSpaceMutex.RUnlock()
	fake.getTaskBySequenceIDAndApplicationMutex.RLock()
	defer fake.getTaskBySequenceIDAndApplicationMutex.RUnlock()
	fake.terminateTaskMutex.RLock()
	defer fake.terminateTaskMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTerminateTaskActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v6.TerminateTaskActor = new(FakeTerminateTaskActor)
