// This file was generated by counterfeiter
package coreconfigfakes

import (
	"sync"

	"code.cloudfoundry.org/cli/cf/configuration/coreconfig"
)

type FakeEndpointRepository struct {
	GetCCInfoStub        func(string) (*coreconfig.CCInfo, string, error)
	getCCInfoMutex       sync.RWMutex
	getCCInfoArgsForCall []struct {
		arg1 string
	}
	getCCInfoReturns struct {
		result1 *coreconfig.CCInfo
		result2 string
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEndpointRepository) GetCCInfo(arg1 string) (*coreconfig.CCInfo, string, error) {
	fake.getCCInfoMutex.Lock()
	fake.getCCInfoArgsForCall = append(fake.getCCInfoArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetCCInfo", []interface{}{arg1})
	fake.getCCInfoMutex.Unlock()
	if fake.GetCCInfoStub != nil {
		return fake.GetCCInfoStub(arg1)
	} else {
		return fake.getCCInfoReturns.result1, fake.getCCInfoReturns.result2, fake.getCCInfoReturns.result3
	}
}

func (fake *FakeEndpointRepository) GetCCInfoCallCount() int {
	fake.getCCInfoMutex.RLock()
	defer fake.getCCInfoMutex.RUnlock()
	return len(fake.getCCInfoArgsForCall)
}

func (fake *FakeEndpointRepository) GetCCInfoArgsForCall(i int) string {
	fake.getCCInfoMutex.RLock()
	defer fake.getCCInfoMutex.RUnlock()
	return fake.getCCInfoArgsForCall[i].arg1
}

func (fake *FakeEndpointRepository) GetCCInfoReturns(result1 *coreconfig.CCInfo, result2 string, result3 error) {
	fake.GetCCInfoStub = nil
	fake.getCCInfoReturns = struct {
		result1 *coreconfig.CCInfo
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeEndpointRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getCCInfoMutex.RLock()
	defer fake.getCCInfoMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeEndpointRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ coreconfig.EndpointRepository = new(FakeEndpointRepository)
