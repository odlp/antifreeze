// This file was generated by counterfeiter
package actorsfakes

import (
	"sync"

	"code.cloudfoundry.org/cli/cf/actors"
	"code.cloudfoundry.org/cli/cf/models"
)

type FakeServiceActor struct {
	FilterBrokersStub        func(brokerFlag string, serviceFlag string, orgFlag string) ([]models.ServiceBroker, error)
	filterBrokersMutex       sync.RWMutex
	filterBrokersArgsForCall []struct {
		brokerFlag  string
		serviceFlag string
		orgFlag     string
	}
	filterBrokersReturns struct {
		result1 []models.ServiceBroker
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceActor) FilterBrokers(brokerFlag string, serviceFlag string, orgFlag string) ([]models.ServiceBroker, error) {
	fake.filterBrokersMutex.Lock()
	fake.filterBrokersArgsForCall = append(fake.filterBrokersArgsForCall, struct {
		brokerFlag  string
		serviceFlag string
		orgFlag     string
	}{brokerFlag, serviceFlag, orgFlag})
	fake.recordInvocation("FilterBrokers", []interface{}{brokerFlag, serviceFlag, orgFlag})
	fake.filterBrokersMutex.Unlock()
	if fake.FilterBrokersStub != nil {
		return fake.FilterBrokersStub(brokerFlag, serviceFlag, orgFlag)
	} else {
		return fake.filterBrokersReturns.result1, fake.filterBrokersReturns.result2
	}
}

func (fake *FakeServiceActor) FilterBrokersCallCount() int {
	fake.filterBrokersMutex.RLock()
	defer fake.filterBrokersMutex.RUnlock()
	return len(fake.filterBrokersArgsForCall)
}

func (fake *FakeServiceActor) FilterBrokersArgsForCall(i int) (string, string, string) {
	fake.filterBrokersMutex.RLock()
	defer fake.filterBrokersMutex.RUnlock()
	return fake.filterBrokersArgsForCall[i].brokerFlag, fake.filterBrokersArgsForCall[i].serviceFlag, fake.filterBrokersArgsForCall[i].orgFlag
}

func (fake *FakeServiceActor) FilterBrokersReturns(result1 []models.ServiceBroker, result2 error) {
	fake.FilterBrokersStub = nil
	fake.filterBrokersReturns = struct {
		result1 []models.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.filterBrokersMutex.RLock()
	defer fake.filterBrokersMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeServiceActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ actors.ServiceActor = new(FakeServiceActor)
