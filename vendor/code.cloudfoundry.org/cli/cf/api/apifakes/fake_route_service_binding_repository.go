// This file was generated by counterfeiter
package apifakes

import (
	"sync"

	"code.cloudfoundry.org/cli/cf/api"
)

type FakeRouteServiceBindingRepository struct {
	BindStub        func(instanceGUID, routeGUID string, userProvided bool, parameters string) error
	bindMutex       sync.RWMutex
	bindArgsForCall []struct {
		instanceGUID string
		routeGUID    string
		userProvided bool
		parameters   string
	}
	bindReturns struct {
		result1 error
	}
	UnbindStub        func(instanceGUID, routeGUID string, userProvided bool) error
	unbindMutex       sync.RWMutex
	unbindArgsForCall []struct {
		instanceGUID string
		routeGUID    string
		userProvided bool
	}
	unbindReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRouteServiceBindingRepository) Bind(instanceGUID string, routeGUID string, userProvided bool, parameters string) error {
	fake.bindMutex.Lock()
	fake.bindArgsForCall = append(fake.bindArgsForCall, struct {
		instanceGUID string
		routeGUID    string
		userProvided bool
		parameters   string
	}{instanceGUID, routeGUID, userProvided, parameters})
	fake.recordInvocation("Bind", []interface{}{instanceGUID, routeGUID, userProvided, parameters})
	fake.bindMutex.Unlock()
	if fake.BindStub != nil {
		return fake.BindStub(instanceGUID, routeGUID, userProvided, parameters)
	} else {
		return fake.bindReturns.result1
	}
}

func (fake *FakeRouteServiceBindingRepository) BindCallCount() int {
	fake.bindMutex.RLock()
	defer fake.bindMutex.RUnlock()
	return len(fake.bindArgsForCall)
}

func (fake *FakeRouteServiceBindingRepository) BindArgsForCall(i int) (string, string, bool, string) {
	fake.bindMutex.RLock()
	defer fake.bindMutex.RUnlock()
	return fake.bindArgsForCall[i].instanceGUID, fake.bindArgsForCall[i].routeGUID, fake.bindArgsForCall[i].userProvided, fake.bindArgsForCall[i].parameters
}

func (fake *FakeRouteServiceBindingRepository) BindReturns(result1 error) {
	fake.BindStub = nil
	fake.bindReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouteServiceBindingRepository) Unbind(instanceGUID string, routeGUID string, userProvided bool) error {
	fake.unbindMutex.Lock()
	fake.unbindArgsForCall = append(fake.unbindArgsForCall, struct {
		instanceGUID string
		routeGUID    string
		userProvided bool
	}{instanceGUID, routeGUID, userProvided})
	fake.recordInvocation("Unbind", []interface{}{instanceGUID, routeGUID, userProvided})
	fake.unbindMutex.Unlock()
	if fake.UnbindStub != nil {
		return fake.UnbindStub(instanceGUID, routeGUID, userProvided)
	} else {
		return fake.unbindReturns.result1
	}
}

func (fake *FakeRouteServiceBindingRepository) UnbindCallCount() int {
	fake.unbindMutex.RLock()
	defer fake.unbindMutex.RUnlock()
	return len(fake.unbindArgsForCall)
}

func (fake *FakeRouteServiceBindingRepository) UnbindArgsForCall(i int) (string, string, bool) {
	fake.unbindMutex.RLock()
	defer fake.unbindMutex.RUnlock()
	return fake.unbindArgsForCall[i].instanceGUID, fake.unbindArgsForCall[i].routeGUID, fake.unbindArgsForCall[i].userProvided
}

func (fake *FakeRouteServiceBindingRepository) UnbindReturns(result1 error) {
	fake.UnbindStub = nil
	fake.unbindReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouteServiceBindingRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.bindMutex.RLock()
	defer fake.bindMutex.RUnlock()
	fake.unbindMutex.RLock()
	defer fake.unbindMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeRouteServiceBindingRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ api.RouteServiceBindingRepository = new(FakeRouteServiceBindingRepository)
