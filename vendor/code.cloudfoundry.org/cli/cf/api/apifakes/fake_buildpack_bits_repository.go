// Code generated by counterfeiter. DO NOT EDIT.
package apifakes

import (
	"os"
	"sync"

	"code.cloudfoundry.org/cli/cf/api"
	"code.cloudfoundry.org/cli/cf/models"
)

type FakeBuildpackBitsRepository struct {
	UploadBuildpackStub        func(buildpack models.Buildpack, buildpackFile *os.File, zipFileName string) error
	uploadBuildpackMutex       sync.RWMutex
	uploadBuildpackArgsForCall []struct {
		buildpack     models.Buildpack
		buildpackFile *os.File
		zipFileName   string
	}
	uploadBuildpackReturns struct {
		result1 error
	}
	uploadBuildpackReturnsOnCall map[int]struct {
		result1 error
	}
	CreateBuildpackZipFileStub        func(buildpackPath string) (*os.File, string, error)
	createBuildpackZipFileMutex       sync.RWMutex
	createBuildpackZipFileArgsForCall []struct {
		buildpackPath string
	}
	createBuildpackZipFileReturns struct {
		result1 *os.File
		result2 string
		result3 error
	}
	createBuildpackZipFileReturnsOnCall map[int]struct {
		result1 *os.File
		result2 string
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBuildpackBitsRepository) UploadBuildpack(buildpack models.Buildpack, buildpackFile *os.File, zipFileName string) error {
	fake.uploadBuildpackMutex.Lock()
	ret, specificReturn := fake.uploadBuildpackReturnsOnCall[len(fake.uploadBuildpackArgsForCall)]
	fake.uploadBuildpackArgsForCall = append(fake.uploadBuildpackArgsForCall, struct {
		buildpack     models.Buildpack
		buildpackFile *os.File
		zipFileName   string
	}{buildpack, buildpackFile, zipFileName})
	fake.recordInvocation("UploadBuildpack", []interface{}{buildpack, buildpackFile, zipFileName})
	fake.uploadBuildpackMutex.Unlock()
	if fake.UploadBuildpackStub != nil {
		return fake.UploadBuildpackStub(buildpack, buildpackFile, zipFileName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.uploadBuildpackReturns.result1
}

func (fake *FakeBuildpackBitsRepository) UploadBuildpackCallCount() int {
	fake.uploadBuildpackMutex.RLock()
	defer fake.uploadBuildpackMutex.RUnlock()
	return len(fake.uploadBuildpackArgsForCall)
}

func (fake *FakeBuildpackBitsRepository) UploadBuildpackArgsForCall(i int) (models.Buildpack, *os.File, string) {
	fake.uploadBuildpackMutex.RLock()
	defer fake.uploadBuildpackMutex.RUnlock()
	return fake.uploadBuildpackArgsForCall[i].buildpack, fake.uploadBuildpackArgsForCall[i].buildpackFile, fake.uploadBuildpackArgsForCall[i].zipFileName
}

func (fake *FakeBuildpackBitsRepository) UploadBuildpackReturns(result1 error) {
	fake.UploadBuildpackStub = nil
	fake.uploadBuildpackReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuildpackBitsRepository) UploadBuildpackReturnsOnCall(i int, result1 error) {
	fake.UploadBuildpackStub = nil
	if fake.uploadBuildpackReturnsOnCall == nil {
		fake.uploadBuildpackReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.uploadBuildpackReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuildpackBitsRepository) CreateBuildpackZipFile(buildpackPath string) (*os.File, string, error) {
	fake.createBuildpackZipFileMutex.Lock()
	ret, specificReturn := fake.createBuildpackZipFileReturnsOnCall[len(fake.createBuildpackZipFileArgsForCall)]
	fake.createBuildpackZipFileArgsForCall = append(fake.createBuildpackZipFileArgsForCall, struct {
		buildpackPath string
	}{buildpackPath})
	fake.recordInvocation("CreateBuildpackZipFile", []interface{}{buildpackPath})
	fake.createBuildpackZipFileMutex.Unlock()
	if fake.CreateBuildpackZipFileStub != nil {
		return fake.CreateBuildpackZipFileStub(buildpackPath)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.createBuildpackZipFileReturns.result1, fake.createBuildpackZipFileReturns.result2, fake.createBuildpackZipFileReturns.result3
}

func (fake *FakeBuildpackBitsRepository) CreateBuildpackZipFileCallCount() int {
	fake.createBuildpackZipFileMutex.RLock()
	defer fake.createBuildpackZipFileMutex.RUnlock()
	return len(fake.createBuildpackZipFileArgsForCall)
}

func (fake *FakeBuildpackBitsRepository) CreateBuildpackZipFileArgsForCall(i int) string {
	fake.createBuildpackZipFileMutex.RLock()
	defer fake.createBuildpackZipFileMutex.RUnlock()
	return fake.createBuildpackZipFileArgsForCall[i].buildpackPath
}

func (fake *FakeBuildpackBitsRepository) CreateBuildpackZipFileReturns(result1 *os.File, result2 string, result3 error) {
	fake.CreateBuildpackZipFileStub = nil
	fake.createBuildpackZipFileReturns = struct {
		result1 *os.File
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBuildpackBitsRepository) CreateBuildpackZipFileReturnsOnCall(i int, result1 *os.File, result2 string, result3 error) {
	fake.CreateBuildpackZipFileStub = nil
	if fake.createBuildpackZipFileReturnsOnCall == nil {
		fake.createBuildpackZipFileReturnsOnCall = make(map[int]struct {
			result1 *os.File
			result2 string
			result3 error
		})
	}
	fake.createBuildpackZipFileReturnsOnCall[i] = struct {
		result1 *os.File
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBuildpackBitsRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.uploadBuildpackMutex.RLock()
	defer fake.uploadBuildpackMutex.RUnlock()
	fake.createBuildpackZipFileMutex.RLock()
	defer fake.createBuildpackZipFileMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBuildpackBitsRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ api.BuildpackBitsRepository = new(FakeBuildpackBitsRepository)
