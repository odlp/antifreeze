// This file was generated by counterfeiter
package errorsfakes

import (
	"sync"

	"code.cloudfoundry.org/cli/cf/errors"
)

type FakeHTTPError struct {
	ErrorStub        func() string
	errorMutex       sync.RWMutex
	errorArgsForCall []struct{}
	errorReturns     struct {
		result1 string
	}
	StatusCodeStub        func() int
	statusCodeMutex       sync.RWMutex
	statusCodeArgsForCall []struct{}
	statusCodeReturns     struct {
		result1 int
	}
	ErrorCodeStub        func() string
	errorCodeMutex       sync.RWMutex
	errorCodeArgsForCall []struct{}
	errorCodeReturns     struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHTTPError) Error() string {
	fake.errorMutex.Lock()
	fake.errorArgsForCall = append(fake.errorArgsForCall, struct{}{})
	fake.recordInvocation("Error", []interface{}{})
	fake.errorMutex.Unlock()
	if fake.ErrorStub != nil {
		return fake.ErrorStub()
	} else {
		return fake.errorReturns.result1
	}
}

func (fake *FakeHTTPError) ErrorCallCount() int {
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	return len(fake.errorArgsForCall)
}

func (fake *FakeHTTPError) ErrorReturns(result1 string) {
	fake.ErrorStub = nil
	fake.errorReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeHTTPError) StatusCode() int {
	fake.statusCodeMutex.Lock()
	fake.statusCodeArgsForCall = append(fake.statusCodeArgsForCall, struct{}{})
	fake.recordInvocation("StatusCode", []interface{}{})
	fake.statusCodeMutex.Unlock()
	if fake.StatusCodeStub != nil {
		return fake.StatusCodeStub()
	} else {
		return fake.statusCodeReturns.result1
	}
}

func (fake *FakeHTTPError) StatusCodeCallCount() int {
	fake.statusCodeMutex.RLock()
	defer fake.statusCodeMutex.RUnlock()
	return len(fake.statusCodeArgsForCall)
}

func (fake *FakeHTTPError) StatusCodeReturns(result1 int) {
	fake.StatusCodeStub = nil
	fake.statusCodeReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeHTTPError) ErrorCode() string {
	fake.errorCodeMutex.Lock()
	fake.errorCodeArgsForCall = append(fake.errorCodeArgsForCall, struct{}{})
	fake.recordInvocation("ErrorCode", []interface{}{})
	fake.errorCodeMutex.Unlock()
	if fake.ErrorCodeStub != nil {
		return fake.ErrorCodeStub()
	} else {
		return fake.errorCodeReturns.result1
	}
}

func (fake *FakeHTTPError) ErrorCodeCallCount() int {
	fake.errorCodeMutex.RLock()
	defer fake.errorCodeMutex.RUnlock()
	return len(fake.errorCodeArgsForCall)
}

func (fake *FakeHTTPError) ErrorCodeReturns(result1 string) {
	fake.ErrorCodeStub = nil
	fake.errorCodeReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeHTTPError) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	fake.statusCodeMutex.RLock()
	defer fake.statusCodeMutex.RUnlock()
	fake.errorCodeMutex.RLock()
	defer fake.errorCodeMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeHTTPError) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ errors.HTTPError = new(FakeHTTPError)
