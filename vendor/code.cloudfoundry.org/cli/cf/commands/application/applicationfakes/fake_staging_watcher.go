// This file was generated by counterfeiter
package applicationfakes

import (
	"sync"

	"code.cloudfoundry.org/cli/cf/commands/application"
	"code.cloudfoundry.org/cli/cf/models"
)

type FakeStagingWatcher struct {
	WatchStagingStub        func(app models.Application, orgName string, spaceName string, startCommand func(app models.Application) (models.Application, error)) (updatedApp models.Application, err error)
	watchStagingMutex       sync.RWMutex
	watchStagingArgsForCall []struct {
		app          models.Application
		orgName      string
		spaceName    string
		startCommand func(app models.Application) (models.Application, error)
	}
	watchStagingReturns struct {
		result1 models.Application
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStagingWatcher) WatchStaging(app models.Application, orgName string, spaceName string, startCommand func(app models.Application) (models.Application, error)) (updatedApp models.Application, err error) {
	fake.watchStagingMutex.Lock()
	fake.watchStagingArgsForCall = append(fake.watchStagingArgsForCall, struct {
		app          models.Application
		orgName      string
		spaceName    string
		startCommand func(app models.Application) (models.Application, error)
	}{app, orgName, spaceName, startCommand})
	fake.recordInvocation("WatchStaging", []interface{}{app, orgName, spaceName, startCommand})
	fake.watchStagingMutex.Unlock()
	if fake.WatchStagingStub != nil {
		return fake.WatchStagingStub(app, orgName, spaceName, startCommand)
	} else {
		return fake.watchStagingReturns.result1, fake.watchStagingReturns.result2
	}
}

func (fake *FakeStagingWatcher) WatchStagingCallCount() int {
	fake.watchStagingMutex.RLock()
	defer fake.watchStagingMutex.RUnlock()
	return len(fake.watchStagingArgsForCall)
}

func (fake *FakeStagingWatcher) WatchStagingArgsForCall(i int) (models.Application, string, string, func(app models.Application) (models.Application, error)) {
	fake.watchStagingMutex.RLock()
	defer fake.watchStagingMutex.RUnlock()
	return fake.watchStagingArgsForCall[i].app, fake.watchStagingArgsForCall[i].orgName, fake.watchStagingArgsForCall[i].spaceName, fake.watchStagingArgsForCall[i].startCommand
}

func (fake *FakeStagingWatcher) WatchStagingReturns(result1 models.Application, result2 error) {
	fake.WatchStagingStub = nil
	fake.watchStagingReturns = struct {
		result1 models.Application
		result2 error
	}{result1, result2}
}

func (fake *FakeStagingWatcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.watchStagingMutex.RLock()
	defer fake.watchStagingMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeStagingWatcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ application.StagingWatcher = new(FakeStagingWatcher)
