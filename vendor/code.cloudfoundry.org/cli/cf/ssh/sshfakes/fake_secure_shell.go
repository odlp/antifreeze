// This file was generated by counterfeiter
package sshfakes

import (
	"sync"

	"code.cloudfoundry.org/cli/cf/ssh"
	"code.cloudfoundry.org/cli/cf/ssh/options"
)

type FakeSecureShell struct {
	ConnectStub        func(opts *options.SSHOptions) error
	connectMutex       sync.RWMutex
	connectArgsForCall []struct {
		opts *options.SSHOptions
	}
	connectReturns struct {
		result1 error
	}
	InteractiveSessionStub        func() error
	interactiveSessionMutex       sync.RWMutex
	interactiveSessionArgsForCall []struct{}
	interactiveSessionReturns     struct {
		result1 error
	}
	LocalPortForwardStub        func() error
	localPortForwardMutex       sync.RWMutex
	localPortForwardArgsForCall []struct{}
	localPortForwardReturns     struct {
		result1 error
	}
	WaitStub        func() error
	waitMutex       sync.RWMutex
	waitArgsForCall []struct{}
	waitReturns     struct {
		result1 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
	closeReturns     struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSecureShell) Connect(opts *options.SSHOptions) error {
	fake.connectMutex.Lock()
	fake.connectArgsForCall = append(fake.connectArgsForCall, struct {
		opts *options.SSHOptions
	}{opts})
	fake.recordInvocation("Connect", []interface{}{opts})
	fake.connectMutex.Unlock()
	if fake.ConnectStub != nil {
		return fake.ConnectStub(opts)
	} else {
		return fake.connectReturns.result1
	}
}

func (fake *FakeSecureShell) ConnectCallCount() int {
	fake.connectMutex.RLock()
	defer fake.connectMutex.RUnlock()
	return len(fake.connectArgsForCall)
}

func (fake *FakeSecureShell) ConnectArgsForCall(i int) *options.SSHOptions {
	fake.connectMutex.RLock()
	defer fake.connectMutex.RUnlock()
	return fake.connectArgsForCall[i].opts
}

func (fake *FakeSecureShell) ConnectReturns(result1 error) {
	fake.ConnectStub = nil
	fake.connectReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSecureShell) InteractiveSession() error {
	fake.interactiveSessionMutex.Lock()
	fake.interactiveSessionArgsForCall = append(fake.interactiveSessionArgsForCall, struct{}{})
	fake.recordInvocation("InteractiveSession", []interface{}{})
	fake.interactiveSessionMutex.Unlock()
	if fake.InteractiveSessionStub != nil {
		return fake.InteractiveSessionStub()
	} else {
		return fake.interactiveSessionReturns.result1
	}
}

func (fake *FakeSecureShell) InteractiveSessionCallCount() int {
	fake.interactiveSessionMutex.RLock()
	defer fake.interactiveSessionMutex.RUnlock()
	return len(fake.interactiveSessionArgsForCall)
}

func (fake *FakeSecureShell) InteractiveSessionReturns(result1 error) {
	fake.InteractiveSessionStub = nil
	fake.interactiveSessionReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSecureShell) LocalPortForward() error {
	fake.localPortForwardMutex.Lock()
	fake.localPortForwardArgsForCall = append(fake.localPortForwardArgsForCall, struct{}{})
	fake.recordInvocation("LocalPortForward", []interface{}{})
	fake.localPortForwardMutex.Unlock()
	if fake.LocalPortForwardStub != nil {
		return fake.LocalPortForwardStub()
	} else {
		return fake.localPortForwardReturns.result1
	}
}

func (fake *FakeSecureShell) LocalPortForwardCallCount() int {
	fake.localPortForwardMutex.RLock()
	defer fake.localPortForwardMutex.RUnlock()
	return len(fake.localPortForwardArgsForCall)
}

func (fake *FakeSecureShell) LocalPortForwardReturns(result1 error) {
	fake.LocalPortForwardStub = nil
	fake.localPortForwardReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSecureShell) Wait() error {
	fake.waitMutex.Lock()
	fake.waitArgsForCall = append(fake.waitArgsForCall, struct{}{})
	fake.recordInvocation("Wait", []interface{}{})
	fake.waitMutex.Unlock()
	if fake.WaitStub != nil {
		return fake.WaitStub()
	} else {
		return fake.waitReturns.result1
	}
}

func (fake *FakeSecureShell) WaitCallCount() int {
	fake.waitMutex.RLock()
	defer fake.waitMutex.RUnlock()
	return len(fake.waitArgsForCall)
}

func (fake *FakeSecureShell) WaitReturns(result1 error) {
	fake.WaitStub = nil
	fake.waitReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSecureShell) Close() error {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	} else {
		return fake.closeReturns.result1
	}
}

func (fake *FakeSecureShell) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeSecureShell) CloseReturns(result1 error) {
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSecureShell) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.connectMutex.RLock()
	defer fake.connectMutex.RUnlock()
	fake.interactiveSessionMutex.RLock()
	defer fake.interactiveSessionMutex.RUnlock()
	fake.localPortForwardMutex.RLock()
	defer fake.localPortForwardMutex.RUnlock()
	fake.waitMutex.RLock()
	defer fake.waitMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeSecureShell) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ sshCmd.SecureShell = new(FakeSecureShell)
